module ActiveSupport::Rescuable::ClassMethods
  # Rescue exceptions raised in controller actions.
  #
  # <tt>rescue_from</tt> receives a series of exception classes or class
  # names, and a trailing <tt>:with</tt> option with the name of a method
  # or a Proc object to be called to handle them. Alternatively a block can
  # be given.
  #
  # Handlers that take one argument will be called with the exception, so
  # that the exception can be inspected when dealing with it.
  #
  # Handlers are inherited. They are searched from right to left, from
  # bottom to top, and up the hierarchy. The handler of the first class for
  # which <tt>exception.is_a?(klass)</tt> holds true is the one invoked, if
  # any.
  #
  #   class ApplicationController < ActionController::Base
  #     rescue_from User::NotAuthorized, with: :deny_access # self defined exception
  #     rescue_from ActiveRecord::RecordInvalid, with: :show_errors
  #
  #     rescue_from 'MyAppError::Base' do |exception|
  #       render xml: exception, status: 500
  #     end
  #
  #     private
  #       def deny_access
  #         ...
  #       end
  #
  #       def show_errors(exception)
  #         exception.record.new_record? ? ...
  #       end
  #   end
  #
  # Exceptions raised inside exception handlers are not propagated up.
  def rescue_from: (*Class, ?with: Symbol | Proc) -> void
                 | (*Class) { (Exception) -> void } -> void
end
