module Roo
  module Utils
    @letter_to_number: untyped

    extend ::Roo::Utils

    LETTERS: untyped

    def extract_coordinate: (untyped s) -> untyped

    alias ref_to_key extract_coordinate

    def split_coordinate: (untyped str) -> untyped

    def split_coord: (untyped str) -> ::Array[untyped]

    # convert a number to something like 'AB' (1 => 'A', 2 => 'B', ...)
    def number_to_letter: (untyped num) -> untyped

    def letter_to_number: (untyped letters) -> untyped

    # Compute upper bound for cells in a given cell range.
    def num_cells_in_range: (untyped str) -> (1 | untyped)

    def coordinates_in_range: (untyped str) ?{ (untyped) -> untyped } -> untyped

    def load_xml: (untyped path) -> untyped

    # Yield each element of a given type ('row', 'c', etc.) to caller
    def each_element: (untyped path, untyped elements) ?{ (untyped) -> untyped } -> untyped

    private

    def char_index: (untyped byte) -> (untyped | untyped | nil)

    def num_index: (untyped byte) -> (untyped | nil)
  end
end
