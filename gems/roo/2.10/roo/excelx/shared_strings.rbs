module Roo
  class Excelx
    class SharedStrings < Excelx::Extractor
      @array: untyped

      @html: untyped

      def []: (untyped index) -> untyped

      def to_a: () -> untyped

      def to_html: () -> untyped

      # Use to_html or to_a for html returns
      # See what is happening with commit???
      def use_html?: (untyped index) -> (false | untyped)

      private

      def fix_invalid_shared_strings: (untyped doc) -> untyped

      def extract_shared_strings: () -> (::Array[untyped] | untyped)

      def extract_html: () -> (::Array[untyped] | untyped)

      # The goal of this function is to take the following XML code snippet and create a html tag
      # r_elem ::: XML Element that is in sharedStrings.xml of excel_book.xlsx
      # {code:xml}
      # <r>
      #   <rPr>
      #      <i/>
      #      <b/>
      #      <u/>
      #      <vertAlign val="subscript"/>
      #      <vertAlign val="superscript"/>
      #   </rPr>
      #   <t>TEXT</t>
      # </r>
      # {code}
      #
      # Expected Output ::: "<html><sub|sup><b><i><u>TEXT</u></i></b></sub|/sup></html>"
      def extract_html_r: (untyped r_elem) -> untyped

      # This will return an html string
      def create_html: (untyped text, untyped formatting) -> untyped
    end
  end
end
