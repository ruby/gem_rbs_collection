module Roo
  class Excelx
    class SheetDoc < Excelx::Extractor
      @shared: Shared

      @options: { expand_merged_ranges: bool, no_hyperlinks: bool, empty_cell: bool }

      @relationships: Relationships

      @cells: Hash[Coordinate, Cell::Boolean | Cell::Date | Cell::DateTime | Cell::Empty | Cell::Number | Cell::String | Cell::Time | nil]

      # If you're sure you're not going to need this hyperlinks you can discard it
      @hyperlinks: Hash[Coordinate, String]

      @dimensions: String

      extend Forwardable

      def initialize: (String path, Relationships relationships, Shared shared, { expand_merged_ranges: bool, no_hyperlinks: bool, empty_cell: bool } options) -> void

      def cells: (Relationships relationships) -> Hash[Coordinate, Cell::Boolean | Cell::Date | Cell::DateTime | Cell::Empty | Cell::Number | Cell::String | Cell::Time | nil]

      def hyperlinks: (Relationships relationships) -> Hash[Coordinate, String]

      # Get the dimensions for the sheet.
      # This is the upper bound of cells that might
      # be parsed. (the document may be sparse so cell count is only upper bound)
      def dimensions: () -> String

      # Yield each row xml element to caller
      def each_row_streaming: { (Nokogiri::XML::Element | nil row) -> void } -> void

      # Yield each cell as Excelx::Cell to caller for given
      # row xml
      def each_cell: (Nokogiri::XML::Element | nil row_xml) { (Cell::String | Cell::Boolean | Cell::Date | Cell::DateTime | Cell::Empty | Cell::Number | Cell::Time) -> void } -> void

      private

      def cell_value_type: ('s' type, String | nil format) -> :shared
                         | ('b' type, String | nil format) -> :boolean
                         | ('str' type, String | nil format) -> :string
                         | ('inlineStr' type, String | nil format) -> :inlinestr
                         | (String type, String | nil format) -> (:date | :float | :datetime | :time | :percentage)

      # Internal: Creates a cell based on an XML clell..
      #
      # cell_xml - a Nokogiri::XML::Element. e.g.
      #             <c r="A5" s="2">
      #               <v>22606</v>
      #             </c>
      # hyperlink - a String for the hyperlink for the cell or nil when no
      #             hyperlink is present.
      # coordinate - a Roo::Excelx::Coordinate for the coordinate for the cell
      #              or nil to extract coordinate from cell_xml.
      # empty_cell - an Optional Boolean value.
      #
      # Examples
      #
      #    cells_from_xml(<Nokogiri::XML::Element>, nil, nil)
      #    # => <Excelx::Cell::String>
      #
      # Returns a type of <Excelx::Cell>.
      def cell_from_xml: (Nokogiri::XML::Element | Nokogiri::XML::Node cell_xml, String | nil hyperlink, Coordinate coordinate) -> (Cell::String | Cell::Boolean | Cell::Date | Cell::DateTime | Cell::Empty | Cell::Number | Cell::Time)
                       | (Nokogiri::XML::Element | Nokogiri::XML::Node cell_xml, String | nil hyperlink, Coordinate coordinate, true empty_cell) -> (Cell::String | Cell::Boolean | Cell::Date | Cell::DateTime | Cell::Empty | Cell::Number | Cell::Time)
                       | (Nokogiri::XML::Element | Nokogiri::XML::Node cell_xml, String | nil hyperlink, Coordinate coordinate, false empty_cell) -> (Cell::String | Cell::Boolean | Cell::Date | Cell::DateTime | Cell::Number | nil)

      def create_empty_cell: (Coordinate coordinate, true empty_cell) -> Excelx::Cell::Empty
                           | (Coordinate coordinate, false empty_cell) -> nil

      def create_cell_from_value: (:shared | :string value_type, Nokogiri::XML::Node cell, String | nil formula, String | nil format, Integer style, String | nil hyperlink, Coordinate coordinate) -> Cell::String
                                | (:boolean value_type, Nokogiri::XML::Node cell, String | nil formula, String | nil format, Integer style, String | nil hyperlink, Coordinate coordinate) -> Cell::Boolean
                                | (:time | :datetime value_type, Nokogiri::XML::Node cell, String | nil formula, String | nil format, Integer style, String | nil hyperlink, Coordinate coordinate) -> (Cell::Time | Cell::DateTime | Cell::Date)
                                | (:date value_type, Nokogiri::XML::Node cell, String | nil formula, String | nil format, Integer style, String | nil hyperlink, Coordinate coordinate) -> Cell::Date
                                | (:inlinestr | :float | :percentage value_type, Nokogiri::XML::Node cell, String | nil formula, String | nil format, Integer style, String | nil hyperlink, Coordinate coordinate) -> Cell::Number

      def extract_hyperlinks: (Relationships relationships) -> (::Hash[Coordinate, String])

      def expand_merged_ranges: (Hash[Coordinate, Cell::Boolean | Cell::Date | Cell::DateTime | Cell::Empty | Cell::Number | Cell::String | Cell::Time] cells) -> void

      def extract_cells: (Relationships relationships) -> Hash[Coordinate, Cell::Boolean | Cell::Date | Cell::DateTime | Cell::Empty | Cell::Number | Cell::String | Cell::Time | nil]

      def extract_dimensions: () -> String

      def style_format: (Integer style) -> (String | nil)

      def base_date: () -> Date

      def base_timestamp: () -> Integer

      def shared_strings: () -> SharedStrings
    end
  end
end
