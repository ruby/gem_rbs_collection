module Roo
  class Excelx
    class SheetDoc < Excelx::Extractor
      @shared: untyped

      @options: untyped

      @relationships: untyped

      @cells: untyped

      # If you're sure you're not going to need this hyperlinks you can discard it
      @hyperlinks: untyped

      @dimensions: untyped

      extend Forwardable

      def initialize: (untyped path, untyped relationships, untyped shared, ?::Hash[untyped, untyped] options) -> void

      def cells: (untyped relationships) -> untyped

      def hyperlinks: (untyped relationships) -> untyped

      # Get the dimensions for the sheet.
      # This is the upper bound of cells that might
      # be parsed. (the document may be sparse so cell count is only upper bound)
      def dimensions: () -> untyped

      # Yield each row xml element to caller
      def each_row_streaming: () { () -> untyped } -> untyped

      # Yield each cell as Excelx::Cell to caller for given
      # row xml
      def each_cell: (untyped row_xml) { (untyped) -> untyped } -> (::Array[untyped] | untyped)

      private

      def cell_value_type: (untyped type, untyped format) -> untyped

      # Internal: Creates a cell based on an XML clell..
      #
      # cell_xml - a Nokogiri::XML::Element. e.g.
      #             <c r="A5" s="2">
      #               <v>22606</v>
      #             </c>
      # hyperlink - a String for the hyperlink for the cell or nil when no
      #             hyperlink is present.
      # coordinate - a Roo::Excelx::Coordinate for the coordinate for the cell
      #              or nil to extract coordinate from cell_xml.
      # empty_cell - an Optional Boolean value.
      #
      # Examples
      #
      #    cells_from_xml(<Nokogiri::XML::Element>, nil, nil)
      #    # => <Excelx::Cell::String>
      #
      # Returns a type of <Excelx::Cell>.
      def cell_from_xml: (untyped cell_xml, untyped hyperlink, untyped coordinate, ?bool empty_cell) -> untyped

      def create_empty_cell: (untyped coordinate, untyped empty_cell) -> (untyped | nil)

      def create_cell_from_value: (untyped value_type, untyped cell, untyped formula, untyped format, untyped style, untyped hyperlink, untyped coordinate) -> untyped

      def extract_hyperlinks: (untyped relationships) -> (::Hash[untyped, untyped] | untyped)

      def expand_merged_ranges: (untyped cells) -> untyped

      def extract_cells: (untyped relationships) -> untyped

      def extract_dimensions: () -> untyped

      def style_format: (untyped style) -> untyped

      def base_date: () -> untyped

      def base_timestamp: () -> untyped

      def shared_strings: () -> untyped
    end
  end
end
