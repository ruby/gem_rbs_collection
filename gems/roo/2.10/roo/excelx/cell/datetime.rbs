module Roo
  class Excelx
    class Cell
      class DateTime < Cell::Base
        @format: string | nil

        @value: Link | ::DateTime

        @default_type: :datetime | :date

        SECONDS_IN_DAY: 86400

        attr_reader value: Link | ::DateTime

        attr_reader formula: string | nil

        attr_reader format: string | nil

        attr_reader cell_value: string

        attr_reader coordinate: ::Roo::Excelx::Coordinate

        def initialize: (string value, string | nil formula, [:numeric_or_formula, string] excelx_type, string | nil style, string | nil link, int base_timestamp, ::Roo::Excelx::Coordinate coordinate) -> void

        # Public: Returns formatted value for a datetime. Format's can be an
        #         standard excel format, or a custom format.
        #
        #         Standard formats follow certain conventions. Date fields for
        #         days, months, and years are separated with hyhens or
        #         slashes ("-", /") (e.g. 01-JAN, 1/13/15). Time fields for
        #         hours, minutes, and seconds are separated with a colon (e.g.
        #         12:45:01).
        #
        #         If a custom format follows those conventions, then the custom
        #         format will be used for the a cell's formatted value.
        #         Otherwise, the formatted value will be in the following
        #         format: 'YYYY-mm-dd HH:MM:SS' (e.g. "2015-07-10 20:33:15").
        #
        # Examples
        #    formatted_value #=> '01-JAN'
        #
        # Returns a String representation of a cell's value.
        def formatted_value: () -> string

        def default_type: () -> :datetime

        def type: () -> (:formula | :link | :datetime)

        private

        def parse_date_or_time_format: (string part) -> (false | string)

        DATE_FORMATS: ::Hash[string, "%Y" | "%y" | "%B" | "%^b" | "%m" | "%-m" | "%A" | "%^a" | "%d" | "%-d"]

        TIME_FORMATS: ::Hash[string, "%H" | "%-k" | "%M" | "%-M" | "%S" | "%-S" | "%p" | "%3N" | "%2N" | "%1N"]

        def create_datetime: (int base_timestamp, string value) -> ::DateTime
      end
    end
  end
end
