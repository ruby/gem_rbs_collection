module Roo
  class OpenOffice < Roo::Base
    @only_visible_sheets: untyped

    # NOTE: Create temp directory and allow Ruby to cleanup the temp directory
    #       when the object is garbage collected. Initially, the finalizer was
    #       created in the Roo::Tempdir module, but that led to a segfault
    #       when testing in Ruby 2.4.0.
    @tmpdir: untyped

    @filename: untyped

    @sheet_names: untyped

    @formula: untyped

    @style: untyped

    @style_defaults: untyped

    @table_display: untyped

    @font_style_definitions: untyped

    @comment: untyped

    @comments_read: untyped

    @doc: untyped

    @label: untyped

    extend Roo::Tempdir

    ERROR_MISSING_CONTENT_XML: "file missing required content.xml"

    XPATH_FIND_TABLE_STYLES: "//*[local-name()='automatic-styles']"

    XPATH_LOCAL_NAME_TABLE: "//*[local-name()='table']"

    # initialization and opening of a spreadsheet file
    # values for packed: :zip
    def initialize: (untyped filename, ?::Hash[untyped, untyped] options) -> void

    def open_oo_file: (untyped options) -> untyped

    def initialize_default_variables: () -> untyped

    def method_missing: (untyped m, *untyped args) -> untyped

    # Returns the content of a spreadsheet-cell.
    # (1,1) is the upper left corner.
    # (1,1), (1,'A'), ('A',1), ('a',1) all refers to the
    # cell at the first line and first row.
    def cell: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # Returns the formula at (row,col).
    # Returns nil if there is no formula.
    # The method #formula? checks if there is a formula.
    def formula: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # Predicate methods really should return a boolean
    # value. Hopefully no one was relying on the fact that this
    # previously returned either nil/formula
    def formula?: (*untyped args) -> untyped

    # returns each formula in the selected sheet as an array of elements
    # [row, col, formula]
    def formulas: (?untyped? sheet) -> (::Array[untyped] | untyped)

    # Given a cell, return the cell's style
    def font: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # returns the type of a cell:
    # * :float
    # * :string
    # * :date
    # * :percentage
    # * :formula
    # * :time
    # * :datetime
    def celltype: (untyped row, untyped col, ?untyped? sheet) -> untyped

    def sheets: () -> untyped

    # version of the Roo::OpenOffice document
    # at 2007 this is always "1.0"
    def officeversion: () -> untyped

    # shows the internal representation of all cells
    # mainly for debugging purposes
    def to_s: (?untyped? sheet) -> untyped

    # returns the row,col values of the labelled cell
    # (nil,nil) if label is not defined
    def label: (untyped labelname) -> (::Array[nil] | ::Array[untyped])

    # Returns an array which all labels. Each element is an array with
    # [labelname, [row,col,sheetname]]
    def labels: (?untyped? _sheet) -> untyped

    # returns the comment at (row/col)
    # nil if there is no comment
    def comment: (untyped row, untyped col, ?untyped? sheet) -> (nil | untyped)

    # returns each comment in the selected sheet as an array of elements
    # [row, col, comment]
    def comments: (?untyped? sheet) -> (::Array[untyped] | untyped)

    private

    # If the ODS file has an encryption-data element, then try to decrypt.
    # If successful, the temporary content.xml will be overwritten with
    # decrypted contents.
    def decrypt_if_necessary: (untyped zip_file, untyped content_entry, untyped roo_content_xml_path, untyped options) -> untyped

    # Process the ODS encryption manifest and perform the decryption
    def perform_decryption: (untyped encryption_data, untyped password, untyped content_entry, untyped roo_content_xml_path) -> untyped

    # Create a cipher based on an ODS algorithm URI from manifest.xml
    # params: algorithm, key_derivation_name, hashed_password, salt, iteration_count, iv
    def find_cipher: (*untyped args) -> untyped

    # Create a cipher key based on an ODS algorithm string from manifest.xml
    def find_cipher_key: (*untyped args) -> untyped

    # Block decrypt raw bytes from the zip file based on the cipher
    def decrypt: (untyped content_entry, untyped cipher) -> untyped

    def doc: () -> untyped

    # read the version of the OO-Version
    def oo_version: () -> untyped

    # helper function to set the internal representation of cells
    def set_cell_values: (untyped sheet, untyped x, untyped y, untyped i, untyped v, untyped value_type, untyped formula, untyped table_cell, untyped str_v, untyped style_name) -> untyped

    # read all cells in the selected sheet
    # -
    # the following construct means '4 blanks'
    # some content <text:s text:c="3"/>
    # +
    def read_cells: (?untyped sheet) -> (nil | untyped)

    # Only calls read_cells because Roo::Base calls read_comments
    # whereas the reading of comments is done in read_cells for Roo::OpenOffice-objects
    def read_comments: (?untyped? sheet) -> untyped

    def read_labels: () -> untyped

    def read_styles: (untyped style_elements) -> untyped

    def read_table_styles: (untyped styles) -> untyped

    # helper method to convert compressed spaces and other elements within
    # an text into a string
    # FIXME: add a test for compressed_spaces == 0. It's not currently tested.
    def children_to_string: (untyped children) -> untyped

    def attribute: (untyped node, untyped attr_name) -> (untyped | nil)
  end
end
