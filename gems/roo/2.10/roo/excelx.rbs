module Roo
  class Excelx < Roo::Base
    # NOTE: Create temp directory and allow Ruby to cleanup the temp directory
    #       when the object is garbage collected. Initially, the finalizer was
    #       created in the Roo::Tempdir module, but that led to a segfault
    #       when testing in Ruby 2.4.0.
    @tmpdir: untyped

    @shared: untyped

    @filename: untyped

    @sheet_names: untyped

    @sheets: untyped

    @sheets_by_name: untyped

    @labels: untyped

    @sheet_files: untyped

    extend Roo::Tempdir

    extend Forwardable

    ERROR_VALUES: untyped

    ExceedsMaxError: untyped

    # initialization and opening of a spreadsheet file
    # values for packed: :zip
    # optional cell_max (int) parameter for early aborting attempts to parse
    # enormous documents.
    def initialize: (untyped filename_or_stream, ?::Hash[untyped, untyped] options) -> void

    def method_missing: (untyped method, *untyped args) -> untyped

    def sheets: () -> untyped

    def sheet_for: (untyped sheet) -> untyped

    def images: (?untyped? sheet) -> untyped

    # Returns the content of a spreadsheet-cell.
    # (1,1) is the upper left corner.
    # (1,1), (1,'A'), ('A',1), ('a',1) all refers to the
    # cell at the first line and first row.
    def cell: (untyped row, untyped col, ?untyped? sheet) -> untyped

    def row: (untyped rownumber, ?untyped? sheet) -> untyped

    # returns all values in this column as an array
    # column numbers are 1,2,3,... like in the spreadsheet
    def column: (untyped column_number, ?untyped? sheet) -> untyped

    # returns the number of the first non-empty row
    def first_row: (?untyped? sheet) -> untyped

    # returns the number of the last non-empty row
    def last_row: (?untyped? sheet) -> untyped

    # returns the number of the first non-empty column
    def first_column: (?untyped? sheet) -> untyped

    # returns the number of the last non-empty column
    def last_column: (?untyped? sheet) -> untyped

    # set a cell to a certain value
    # (this will not be saved back to the spreadsheet file!)
    def set: (untyped row, untyped col, untyped value, ?untyped? sheet) -> untyped

    # Returns the formula at (row,col).
    # Returns nil if there is no formula.
    # The method #formula? checks if there is a formula.
    def formula: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # Predicate methods really should return a boolean
    # value. Hopefully no one was relying on the fact that this
    # previously returned either nil/formula
    def formula?: (*untyped args) -> untyped

    # returns each formula in the selected sheet as an array of tuples in following format
    # [[row, col, formula], [row, col, formula],...]
    def formulas: (?untyped? sheet) -> untyped

    # Given a cell, return the cell's style
    def font: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # returns the type of a cell:
    # * :float
    # * :string,
    # * :date
    # * :percentage
    # * :formula
    # * :time
    # * :datetime
    def celltype: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # returns the internal type of an excel cell
    # * :numeric_or_formula
    # * :string
    # Note: this is only available within the Excelx class
    def excelx_type: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # returns the internal value of an excelx cell
    # Note: this is only available within the Excelx class
    def excelx_value: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # returns the internal value of an excelx cell
    # Note: this is only available within the Excelx class
    def formatted_value: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # returns the internal format of an excel cell
    def excelx_format: (untyped row, untyped col, ?untyped? sheet) -> untyped

    def empty?: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # shows the internal representation of all cells
    # for debugging purposes
    def to_s: (?untyped? sheet) -> untyped

    # returns the row,col values of the labelled cell
    # (nil,nil) if label is not defined
    def label: (untyped name) -> (::Array[nil] | ::Array[untyped])

    # Returns an array which all labels. Each element is an array with
    # [labelname, [row,col,sheetname]]
    def labels: () -> untyped

    def hyperlink?: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # returns the hyperlink at (row/col)
    # nil if there is no hyperlink
    def hyperlink: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # returns the comment at (row/col)
    # nil if there is no comment
    def comment: (untyped row, untyped col, ?untyped? sheet) -> untyped

    # true, if there is a comment
    def comment?: (untyped row, untyped col, ?untyped? sheet) -> untyped

    def comments: (?untyped? sheet) -> untyped

    # Yield an array of Excelx::Cell
    # Takes options for sheet, pad_cells, and max_rows
    def each_row_streaming: (?::Hash[untyped, untyped] options) ?{ (untyped) -> untyped } -> untyped

    private

    def clean_sheet: (untyped sheet) -> untyped

    # Internal: extracts the worksheet_ids from the workbook.xml file. xlsx
    #           documents require a workbook.xml file, so a if the file is missing
    #           it is not a valid xlsx file. In these cases, an ArgumentError is
    #           raised.
    #
    # wb - a Zip::Entry for the workbook.xml file.
    # path - A String for Zip::Entry's destination path.
    #
    # Examples
    #
    #   extract_worksheet_ids(<Zip::Entry>, 'tmpdir/roo_workbook.xml')
    #   # => ["rId1", "rId2", "rId3"]
    #
    # Returns an Array of Strings.
    def extract_worksheet_ids: (untyped entries, untyped path) -> untyped

    # Internal
    #
    # wb_rels - A Zip::Entry for the workbook.xml.rels file.
    # path - A String for the Zip::Entry's destination path.
    #
    # Examples
    #
    #   extract_worksheets(<Zip::Entry>, 'tmpdir/roo_workbook.xml.rels')
    #   # => {
    #         "rId1"=>"worksheets/sheet1.xml",
    #         "rId2"=>"worksheets/sheet2.xml",
    #         "rId3"=>"worksheets/sheet3.xml"
    #        }
    #
    # Returns a Hash.
    def extract_worksheet_rels: (untyped entries, untyped path) -> untyped

    # Extracts the sheets in order, but it will ignore sheets that are not
    # worksheets.
    def extract_sheets_in_order: (untyped entries, untyped sheet_ids, untyped sheets, untyped tmpdir) -> untyped

    def extract_images: (untyped entries, untyped tmpdir) -> untyped

    # Extracts all needed files from the zip file
    def process_zipfile: (untyped zipfilename_or_stream) -> untyped

    def process_zipfile_entries: (untyped entries) -> untyped

    def safe_send: (untyped object, untyped method, *untyped args) -> (untyped | nil)

    def worksheet_types: () -> ::Array["http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" | "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"]
  end
end
