module Google
  module Auth
    #
    # Credentials is a high-level base class used by Google's API client
    # libraries to represent the authentication when connecting to an API.
    # In most cases, it is subclassed by API-specific credential classes that
    # can be instantiated by clients.
    #
    # ## Options
    #
    # Credentials classes are configured with options that dictate default
    # values for parameters such as scope and audience. These defaults are
    # expressed as class attributes, and may differ from endpoint to endpoint.
    # Normally, an API client will provide subclasses specific to each
    # endpoint, configured with appropriate values.
    #
    # Note that these options inherit up the class hierarchy. If a particular
    # options is not set for a subclass, its superclass is queried.
    #
    # Some older users of this class set options via constants. This usage is
    # deprecated. For example, instead of setting the `AUDIENCE` constant on
    # your subclass, call the `audience=` method.
    #
    # ## Example
    #
    #     class MyCredentials < Google::Auth::Credentials
    #       # Set the default scope for these credentials
    #       self.scope = "http://example.com/my_scope"
    #     end
    #
    #     # creds is a credentials object suitable for Google API clients
    #     creds = MyCredentials.default
    #     creds.scope  # => ["http://example.com/my_scope"]
    #
    #     class SubCredentials < MyCredentials
    #       # Override the default scope for this subclass
    #       self.scope = "http://example.com/sub_scope"
    #     end
    #
    #     creds2 = SubCredentials.default
    #     creds2.scope  # => ["http://example.com/sub_scope"]
    #
    class Credentials
      self.@audience: untyped

      self.@token_credential_uri: untyped

      self.@scope: untyped

      self.@target_audience: untyped

      self.@env_vars: untyped

      self.@paths: untyped

      @project_id: untyped

      @quota_project_id: untyped

      @env_vars: untyped

      @paths: untyped

      @scope: untyped

      @client: untyped

      #
      # The default token credential URI to be used when none is provided during initialization.
      TOKEN_CREDENTIAL_URI: "https://oauth2.googleapis.com/token"

      #
      # The default target audience ID to be used when none is provided during initialization.
      AUDIENCE: "https://oauth2.googleapis.com/token"

      #
      # The default token credential URI to be used when none is provided during initialization.
      # The URI is the authorization server's HTTP endpoint capable of issuing tokens and
      # refreshing expired tokens.
      #
      # @return [String]
      #
      def self.token_credential_uri: () -> untyped

      #
      # Set the default token credential URI to be used when none is provided during initialization.
      #
      # @param [String] new_token_credential_uri
      #
      def self.token_credential_uri=: (untyped new_token_credential_uri) -> untyped

      #
      # The default target audience ID to be used when none is provided during initialization.
      # Used only by the assertion grant type.
      #
      # @return [String]
      #
      def self.audience: () -> untyped

      #
      # Sets the default target audience ID to be used when none is provided during initialization.
      #
      # @param [String] new_audience
      #
      def self.audience=: (untyped new_audience) -> untyped

      #
      # The default scope to be used when none is provided during initialization.
      # A scope is an access range defined by the authorization server.
      # The scope can be a single value or a list of values.
      #
      # Either {#scope} or {#target_audience}, but not both, should be non-nil.
      # If {#scope} is set, this credential will produce access tokens.
      # If {#target_audience} is set, this credential will produce ID tokens.
      #
      # @return [String, Array<String>, nil]
      #
      def self.scope: () -> untyped

      #
      # Sets the default scope to be used when none is provided during initialization.
      #
      # Either {#scope} or {#target_audience}, but not both, should be non-nil.
      # If {#scope} is set, this credential will produce access tokens.
      # If {#target_audience} is set, this credential will produce ID tokens.
      #
      # @param [String, Array<String>, nil] new_scope
      #
      def self.scope=: (untyped new_scope) -> untyped

      #
      # The default final target audience for ID tokens, to be used when none
      # is provided during initialization.
      #
      # Either {#scope} or {#target_audience}, but not both, should be non-nil.
      # If {#scope} is set, this credential will produce access tokens.
      # If {#target_audience} is set, this credential will produce ID tokens.
      #
      # @return [String, nil]
      #
      def self.target_audience: () -> untyped

      #
      # Sets the default final target audience for ID tokens, to be used when none
      # is provided during initialization.
      #
      # Either {#scope} or {#target_audience}, but not both, should be non-nil.
      # If {#scope} is set, this credential will produce access tokens.
      # If {#target_audience} is set, this credential will produce ID tokens.
      #
      # @param [String, nil] new_target_audience
      #
      def self.target_audience=: (untyped new_target_audience) -> untyped

      #
      # The environment variables to search for credentials. Values can either be a file path to the
      # credentials file, or the JSON contents of the credentials file.
      # The env_vars will never be nil. If there are no vars, the empty array is returned.
      #
      # @return [Array<String>]
      #
      def self.env_vars: () -> untyped

      #
      # @private
      # Internal recursive lookup for env_vars.
      #
      def self.env_vars_internal: () -> untyped

      #
      # Sets the environment variables to search for credentials.
      # Setting to `nil` "unsets" the value, and defaults to the superclass
      # (or to the empty array if there is no superclass).
      #
      # @param [String, Array<String>, nil] new_env_vars
      #
      def self.env_vars=: (untyped new_env_vars) -> untyped

      #
      # The file paths to search for credentials files.
      # The paths will never be nil. If there are no paths, the empty array is returned.
      #
      # @return [Array<String>]
      #
      def self.paths: () -> untyped

      #
      # @private
      # Internal recursive lookup for paths.
      #
      def self.paths_internal: () -> untyped

      #
      # Set the file paths to search for credentials files.
      # Setting to `nil` "unsets" the value, and defaults to the superclass
      # (or to the empty array if there is no superclass).
      #
      # @param [String, Array<String>, nil] new_paths
      #
      def self.paths=: (untyped new_paths) -> untyped

      #
      # @private
      # Return the given parameter value, defaulting up the class hierarchy.
      #
      # First returns the value of the instance variable, if set.
      # Next, calls the given block if provided. (This is generally used to
      # look up legacy constant-based values.)
      # Otherwise, calls the superclass method if present.
      # Returns nil if all steps fail.
      #
      # @param name [Symbol] The parameter name
      # @param method_name [Symbol] The lookup method name, if different
      # @return [Object] The value
      #
      def self.lookup_auth_param: (untyped name, ?untyped method_name) ?{ () -> untyped } -> (untyped | nil)

      #
      # @private
      # Return the value of the given constant if it is defined directly in
      # this class, or nil if not.
      #
      # @param [Symbol] Name of the constant
      # @return [Object] The value
      #
      def self.lookup_local_constant: (untyped name) -> (untyped | nil)

      #
      # The Signet::OAuth2::Client object the Credentials instance is using.
      #
      # @return [Signet::OAuth2::Client]
      #
      attr_accessor client: untyped

      #
      # Identifier for the project the client is authenticating with.
      #
      # @return [String]
      #
      attr_reader project_id: untyped

      #
      # Identifier for a separate project used for billing/quota, if any.
      #
      # @return [String,nil]
      #
      attr_reader quota_project_id: untyped

      # @private Delegate client methods to the client object.
      extend Forwardable

      #
      # Creates a new Credentials instance with the provided auth credentials, and with the default
      # values configured on the class.
      #
      # @param [String, Hash, Signet::OAuth2::Client] keyfile
      #   The keyfile can be provided as one of the following:
      #
      #   * The path to a JSON keyfile (as a +String+)
      #   * The contents of a JSON keyfile (as a +Hash+)
      #   * A +Signet::OAuth2::Client+ object
      # @param [Hash] options
      #   The options for configuring the credentials instance. The following is supported:
      #
      #   * +:scope+ - the scope for the client
      #   * +"project_id"+ (and optionally +"project"+) - the project identifier for the client
      #   * +:connection_builder+ - the connection builder to use for the client
      #   * +:default_connection+ - the default connection to use for the client
      #
      def initialize: (untyped keyfile, ?::Hash[untyped, untyped] options) -> void

      #
      # Creates a new Credentials instance with auth credentials acquired by searching the
      # environment variables and paths configured on the class, and with the default values
      # configured on the class.
      #
      # The auth credentials are searched for in the following order:
      #
      # 1. configured environment variables (see {Credentials.env_vars})
      # 2. configured default file paths (see {Credentials.paths})
      # 3. application default (see {Google::Auth.get_application_default})
      #
      # @param [Hash] options
      #   The options for configuring the credentials instance. The following is supported:
      #
      #   * +:scope+ - the scope for the client
      #   * +"project_id"+ (and optionally +"project"+) - the project identifier for the client
      #   * +:connection_builder+ - the connection builder to use for the client
      #   * +:default_connection+ - the default connection to use for the client
      #
      # @return [Credentials]
      #
      def self.default: (?::Hash[untyped, untyped] options) -> untyped

      #
      # @private Lookup Credentials from environment variables.
      def self.from_env_vars: (untyped options) -> (untyped | nil)

      #
      # @private Lookup Credentials from default file paths.
      def self.from_default_paths: (untyped options) -> (untyped | nil)

      #
      # @private Lookup Credentials using Google::Auth.get_application_default.
      def self.from_application_default: (untyped options) -> untyped

      # @private Read credentials from a JSON stream.
      def self.from_io: (untyped io, untyped options) -> untyped

      # Verify that the keyfile argument is provided.
      def verify_keyfile_provided!: (untyped keyfile) -> (nil | untyped)

      # Verify that the keyfile argument is a file.
      def verify_keyfile_exists!: (untyped keyfile) -> untyped

      # Initializes the Signet client.
      def init_client: (untyped hash, ?::Hash[untyped, untyped] options) -> untyped

      # returns a new Hash with string keys instead of symbol keys.
      def stringify_hash_keys: (untyped hash) -> untyped

      # returns a new Hash with symbol keys instead of string keys.
      def symbolize_hash_keys: (untyped hash) -> untyped

      def update_client_options: (untyped options) -> untyped

      def update_from_signet: (untyped client) -> untyped

      def update_from_hash: (untyped hash, untyped options) -> untyped

      def update_from_filepath: (untyped path, untyped options) -> untyped
    end
  end
end
