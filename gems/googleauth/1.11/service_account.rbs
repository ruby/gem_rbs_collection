module Google
  # Module Auth provides classes that provide Google-specific authorization
  # used to access Google APIs.
  module Auth
    # Authenticates requests using Google's Service Account credentials via an
    # OAuth access token.
    #
    # This class allows authorizing requests for service accounts directly
    # from credentials from a json key file downloaded from the developer
    # console (via 'Generate new Json Key').
    #
    # cf [Application Default Credentials](https://cloud.google.com/docs/authentication/production)
    class ServiceAccountCredentials < Signet::OAuth2::Client
      @project_id: untyped

      @quota_project_id: untyped

      @enable_self_signed_jwt: untyped

      TOKEN_CRED_URI: "https://www.googleapis.com/oauth2/v4/token"

      extend CredentialsLoader

      extend JsonKeyReader

      attr_reader project_id: untyped

      attr_reader quota_project_id: untyped

      def enable_self_signed_jwt?: () -> untyped

      # Creates a ServiceAccountCredentials.
      #
      # @param json_key_io [IO] an IO from which the JSON key can be read
      # @param scope [string|array|nil] the scope(s) to access
      def self.make_creds: (?::Hash[untyped, untyped] options) -> untyped

      # Handles certain escape sequences that sometimes appear in input.
      # Specifically, interprets the "\n" sequence for newline, and removes
      # enclosing quotes.
      def self.unescape: (untyped str) -> untyped

      def initialize: (?::Hash[untyped, untyped] options) -> void

      # Extends the base class to use a transient
      # ServiceAccountJwtHeaderCredentials for certain cases.
      def apply!: (untyped a_hash, ?::Hash[untyped, untyped] opts) -> untyped

      # Modifies this logic so it also requires self-signed-jwt to be disabled
      def needs_access_token?: () -> untyped

      private

      def apply_self_signed_jwt!: (untyped a_hash) -> untyped
    end

    # Authenticates requests using Google's Service Account credentials via
    # JWT Header.
    #
    # This class allows authorizing requests for service accounts directly
    # from credentials from a json key file downloaded from the developer
    # console (via 'Generate new Json Key').  It is not part of any OAuth2
    # flow, rather it creates a JWT and sends that as a credential.
    #
    # cf [Application Default Credentials](https://cloud.google.com/docs/authentication/production)
    class ServiceAccountJwtHeaderCredentials
      @private_key: untyped

      @issuer: untyped

      @project_id: untyped

      @quota_project_id: untyped

      @universe_domain: untyped

      @signing_key: untyped

      @scope: untyped

      JWT_AUD_URI_KEY: :jwt_aud_uri

      AUTH_METADATA_KEY: untyped

      TOKEN_CRED_URI: "https://www.googleapis.com/oauth2/v4/token"

      SIGNING_ALGORITHM: "RS256"

      EXPIRY: 60

      extend CredentialsLoader

      extend JsonKeyReader

      attr_reader project_id: untyped

      attr_reader quota_project_id: untyped

      attr_accessor universe_domain: untyped

      # Create a ServiceAccountJwtHeaderCredentials.
      #
      # @param json_key_io [IO] an IO from which the JSON key can be read
      # @param scope [string|array|nil] the scope(s) to access
      def self.make_creds: (?::Hash[untyped, untyped] options) -> untyped

      # Initializes a ServiceAccountJwtHeaderCredentials.
      #
      # @param json_key_io [IO] an IO from which the JSON key can be read
      def initialize: (?::Hash[untyped, untyped] options) -> void

      # Construct a jwt token if the JWT_AUD_URI key is present in the input
      # hash.
      #
      # The jwt token is used as the value of a 'Bearer '.
      def apply!: (untyped a_hash, ?::Hash[untyped, untyped] opts) -> untyped

      # Returns a clone of a_hash updated with the authoriation header
      def apply: (untyped a_hash, ?::Hash[untyped, untyped] opts) -> untyped

      # Returns a reference to the #apply method, suitable for passing as
      # a closure
      def updater_proc: () -> untyped

      # Creates a jwt uri token.
      def new_jwt_token: (?untyped? jwt_aud_uri, ?::Hash[untyped, untyped] options) -> untyped

      # Duck-types the corresponding method from BaseClient
      def needs_access_token?: () -> false
    end
  end
end
