module ActiveRecord
  class Base
    module DelegatedType
      def delegated_type: (Symbol role, types: Array[String], **untyped options) -> void
    end
    extend DelegatedType

    module ClassMethods[Model, Relation, PrimaryKey]
      def strict_loading: (?bool value) -> Relation
    end
  end

  module Core
    def values_at: (*Symbol | String) -> Array[untyped]
    def strict_loading!: () -> bool
    def strict_loading?: () -> bool
  end

  class AssociationRelation
    def insert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def insert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def insert!: (untyped attributes, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def insert_all!: (untyped attributes, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def upsert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def upsert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
  end

  module Associations
    class CollectionProxy
      def insert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def insert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def insert!: (untyped attributes, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def insert_all!: (untyped attributes, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def upsert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def upsert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    end
  end

  module Enum
    def enum: (Hash[Symbol, untyped] definitions) -> void
  end

  class RuntimeRegistry
    extend ActiveSupport::PerThreadRegistry
    attr_accessor sql_runtime: untyped
    def self.sql_runtime: () -> untyped
    def self.sql_runtime=: (untyped) -> untyped
  end

  class ConnectionNotEstablished < ActiveRecordError
  end

  class StatementInvalid < ActiveRecordError
    def initialize: (?untyped? message, ?binds: untyped? binds, ?sql: untyped? sql) -> untyped

    attr_reader sql: untyped

    attr_reader binds: untyped
  end

  class MismatchedForeignKey < StatementInvalid
    def initialize: (?primary_key_column: untyped? primary_key_column, ?primary_key: untyped? primary_key, ?target_table: untyped? target_table, ?foreign_key: untyped? foreign_key, ?table: untyped? table, ?binds: untyped? binds, ?sql: untyped? sql, ?message: untyped? message) -> untyped
  end

  module QueryMethods
    class WhereChain[Relation]
      def missing: (*Symbol associations) -> Relation
    end
  end

  module Persistence
    extend ActiveSupport::Concern

    module ClassMethods
      def insert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?) -> untyped

      def insert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?) -> untyped

      def insert!: (untyped attributes, ?returning: untyped?) -> untyped

      def insert_all!: (untyped attributes, ?returning: untyped?) -> untyped

      def upsert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?) -> untyped

      def upsert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?) -> untyped
    end
  end

  class InsertAll
    def initialize: (untyped model, untyped inserts, on_duplicate: untyped, ?unique_by: untyped?, ?returning: untyped?) -> untyped
  end
end

module Arel
  class Table
    def initialize: (untyped name, ?type_caster: untyped type_caster, ?as: untyped? as, ?klass: untyped?) -> void
  end

  class InsertManager < Arel::TreeManager
    def initialize: () -> untyped
  end

  class UpdateManager < Arel::TreeManager
    def initialize: () -> untyped
  end

  class DeleteManager < Arel::TreeManager
    def initialize: () -> untyped
  end
end
