module ActiveRecord
  class Base
    module DelegatedType
      def delegated_type: (Symbol role, types: Array[String], **untyped options) -> void
    end
    extend DelegatedType

    module ClassMethods[Model, Relation, PrimaryKey]
      def and: (::ActiveRecord::Relation) -> Relation
      def strict_loading: (?bool value) -> Relation
    end
  end

  class Relation
    module Methods[Model, PrimaryKey]
      def and: (::ActiveRecord::Relation) -> self
    end
  end

  module Core
    def values_at: (*Symbol | String) -> Array[untyped]
    def strict_loading!: () -> bool
    def strict_loading?: () -> bool
  end

  class AssociationRelation
    def insert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def insert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def insert!: (untyped attributes, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def insert_all!: (untyped attributes, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def upsert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    def upsert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
  end

  module Associations
    class CollectionProxy
      def insert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def insert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def insert!: (untyped attributes, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def insert_all!: (untyped attributes, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def upsert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
      def upsert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?, ?record_timestamps: bool?) -> untyped
    end
  end

  module Enum
    def enum: (Hash[Symbol, untyped] definitions) -> void
  end

  class RuntimeRegistry
    extend ActiveSupport::PerThreadRegistry
    attr_accessor sql_runtime: untyped
    def self.sql_runtime: () -> untyped
    def self.sql_runtime=: (untyped) -> untyped
  end

  class ConnectionNotEstablished < ActiveRecordError
  end

  class StatementInvalid < ActiveRecordError
    def initialize: (?untyped? message, ?binds: untyped? binds, ?sql: untyped? sql) -> untyped

    attr_reader sql: untyped

    attr_reader binds: untyped
  end

  class MismatchedForeignKey < StatementInvalid
    def initialize: (?primary_key_column: untyped? primary_key_column, ?primary_key: untyped? primary_key, ?target_table: untyped? target_table, ?foreign_key: untyped? foreign_key, ?table: untyped? table, ?binds: untyped? binds, ?sql: untyped? sql, ?message: untyped? message) -> untyped
  end

  module QueryMethods
    class WhereChain[Relation]
      def missing: (*Symbol associations) -> Relation
    end
  end

  module Persistence
    extend ActiveSupport::Concern

    module ClassMethods
      def insert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?) -> untyped

      def insert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?) -> untyped

      def insert!: (untyped attributes, ?returning: untyped?) -> untyped

      def insert_all!: (untyped attributes, ?returning: untyped?) -> untyped

      def upsert: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?) -> untyped

      def upsert_all: (untyped attributes, ?unique_by: untyped?, ?returning: untyped?) -> untyped
    end
  end

  class InsertAll
    def initialize: (untyped model, untyped inserts, on_duplicate: untyped, ?unique_by: untyped?, ?returning: untyped?) -> untyped
  end

  module ConnectionHandling
    def connects_to: (?database: ::Hash[Symbol, Symbol]) -> Array[ConnectionAdapters::ConnectionPool]
                   | (?shards: ::Hash[Symbol, ::Hash[Symbol, Symbol]]) -> Array[ConnectionAdapters::ConnectionPool]
  end
end

module Arel
  class Table
    def initialize: (untyped name, ?type_caster: untyped type_caster, ?as: untyped? as, ?klass: untyped?) -> void
  end

  class InsertManager < Arel::TreeManager
    def initialize: () -> untyped
  end

  class UpdateManager < Arel::TreeManager
    def initialize: () -> untyped
  end

  class DeleteManager < Arel::TreeManager
    def initialize: () -> untyped
  end
end

interface _ActiveRecord_Relation[Model, PrimaryKey] # rubocop:disable RBS/Lint/TopLevelInterface
  def all: () -> self
  def ids: () -> Array[PrimaryKey]
  def none: () -> self
  def pluck: (Symbol | String | Arel::Nodes::t column) -> Array[untyped]
           | (*Symbol | String | Arel::Nodes::t columns) -> Array[Array[untyped]]
  def where: () -> ::ActiveRecord::QueryMethods::WhereChain[self]
           | (*untyped) -> self
  def exists?: (*untyped) -> bool
  def order: (*untyped) -> self
  def group: (*Symbol | String) -> untyped
  def in_order_of: (Symbol, Array[untyped]) -> self
  def distinct: () -> self
  def or: (::ActiveRecord::Relation) -> self
  def merge: (Array[untyped] | Hash[untyped, untyped] | ActiveRecord::Relation | Proc) -> self
  def joins: (*String | Symbol | Hash[untyped, untyped]) -> self
  def left_joins: (*String | Symbol | Hash[untyped, untyped]) -> self
  def left_outer_joins: (*String | Symbol | Hash[untyped, untyped]) -> self
  def includes: (*String | Symbol | Array[untyped] | Hash[untyped, untyped], **(String | Symbol | Array[untyped] | Hash[untyped, untyped])) -> self
  def eager_load: (*String | Symbol | Array[untyped] | Hash[untyped, untyped], **(String | Symbol | Array[untyped] | Hash[untyped, untyped])) -> self
  def preload: (*String | Symbol | Array[untyped] | Hash[untyped, untyped], **(String | Symbol | Array[untyped] | Hash[untyped, untyped])) -> self
  def find_by: (untyped, *untyped) -> Model?
  def find_by!: (untyped, *untyped) -> Model
  def find: (PrimaryKey id) -> Model
          | (Array[PrimaryKey]) -> Array[Model]
          | (*PrimaryKey) -> Array[Model]
          | () { (Model) -> boolish } -> Model?
  def find_or_create_by: (untyped) -> Model
                       | (untyped) { (Model) -> void } -> Model
  def find_or_create_by!: (untyped) -> Model
                        | (untyped) { (Model) -> void } -> Model
  def find_or_initialize_by: (untyped) -> Model
                           | (untyped) { (Model) -> void } -> Model
  def create_or_find_by: (untyped) -> Model
                       | (untyped) { (Model) -> void } -> Model
  def create_or_find_by!: (untyped) -> Model
                        | (untyped) { (Model) -> void } -> Model
  def take: () -> Model
          | (Integer limit) -> Array[Model]
  def take!: () -> Model
  def first: () -> Model?
           | (Integer count) -> Array[Model]
  def first!: () -> Model
  def second: () -> Model?
  def second!: () -> Model
  def third: () -> Model?
  def third!: () -> Model
  def fourth: () -> Model?
  def fourth!: () -> Model
  def fifth: () -> Model?
  def fifth!: () -> Model
  def forty_two: () -> Model?
  def forty_two!: () -> Model
  def second_to_last: () -> Model?
  def second_to_last!: () -> Model
  def third_to_last: () -> Model?
  def third_to_last!: () -> Model
  def last: () -> Model?
          | (Integer count) -> Array[Model]
  def last!: () -> Model
  def limit: (Integer | Arel::Nodes::SqlLiteral | nil) -> self
  def limit!: (Integer | Arel::Nodes::SqlLiteral | nil) -> self
  def offset: (Integer) -> self
  def offset!: (Integer) -> self
  def find_each: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (Model) -> void } -> nil
               | (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) -> Enumerator[Model, nil]
  def find_in_batches: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (Array[Model]) -> void } -> nil
  def in_batches: (?of: Integer, ?start: Integer, ?finish: Integer, ?load: bool, ?error_on_ignore: bool, ?order: untyped) { (self) -> void } -> nil
  def sum: (?untyped? column_name) -> untyped
         | [T] (?T initial_value) { (Model) -> T } -> T
  def destroy_all: () -> untyped
  def delete_all: () -> untyped
  def update_all: (untyped) -> untyped
  def touch_all: (*untyped, ?time: untyped) -> untyped
  def destroy_by: (*untyped) -> untyped
  def delete_by: (*untyped) -> untyped
  def each: () { (Model) -> void } -> self
  def select: (*Symbol | String | Arel::Nodes::t) -> self
            | () { (Model) -> boolish } -> Array[Model]
  def reselect: (*Symbol | String | Arel::Nodes::t) -> self
  def count: () -> ::Integer
           | () { (Model) -> boolish } -> ::Integer
           | (Symbol | String column_name) -> ::Integer
end

interface _ActiveRecord_Relation_ClassMethods[Model, Relation, PrimaryKey] # rubocop:disable RBS/Lint/TopLevelInterface
  def all: () -> Relation
  def ids: () -> Array[PrimaryKey]
  def none: () -> Relation
  def pluck: (Symbol | String | Arel::Nodes::t column) -> Array[untyped]
           | (*Symbol | String | Arel::Nodes::t columns) -> Array[Array[untyped]]
  def where: () -> ::ActiveRecord::QueryMethods::WhereChain[Relation]
           | (*untyped) -> Relation
  def exists?: (*untyped) -> bool
  def any?: () -> bool
          | () { (Model) -> boolish } -> bool
  def many?: () -> bool
           | () { (Model) -> boolish } -> bool
  def none?: () -> bool
           | () { (Model) -> boolish } -> bool
  def one?: () -> bool
          | () { (Model) -> boolish } -> bool
  def order: (*untyped) -> Relation
  def group: (*Symbol | String) -> untyped
  def in_order_of: (Symbol, Array[untyped]) -> Relation
  def distinct: () -> Relation
  def or: (::ActiveRecord::Relation) -> Relation
  def merge: (Array[untyped] | Hash[untyped, untyped] | ActiveRecord::Relation | Proc) -> Relation
  def joins: (*String | Symbol | Hash[untyped, untyped]) -> Relation
  def left_joins: (*String | Symbol | Hash[untyped, untyped]) -> Relation
  def left_outer_joins: (*String | Symbol | Hash[untyped, untyped]) -> Relation
  def includes: (*String | Symbol | Array[untyped] | Hash[untyped, untyped], **(String | Symbol | Array[untyped] | Hash[untyped, untyped])) -> Relation
  def eager_load: (*String | Symbol | Array[untyped] | Hash[untyped, untyped], **(String | Symbol | Array[untyped] | Hash[untyped, untyped])) -> Relation
  def preload: (*String | Symbol | Array[untyped] | Hash[untyped, untyped], **(String | Symbol | Array[untyped] | Hash[untyped, untyped])) -> Relation
  def find_by: (untyped) -> Model?
  def find_by!: (untyped) -> Model
  def find: (PrimaryKey id) -> Model
          | (Array[PrimaryKey]) -> Array[Model]
          | (*PrimaryKey) -> Array[Model]
  def find_or_create_by: (untyped) -> Model
                       | (untyped) { (Model) -> void } -> Model
  def find_or_create_by!: (untyped) -> Model
                        | (untyped) { (Model) -> void } -> Model
  def find_or_initialize_by: (untyped) -> Model
                           | (untyped) { (Model) -> void } -> Model
  def create_or_find_by: (untyped) -> Model
                       | (untyped) { (Model) -> void } -> Model
  def create_or_find_by!: (untyped) -> Model
                        | (untyped) { (Model) -> void } -> Model
  def take: () -> Model
          | (Integer limit) -> Array[Model]
  def take!: () -> Model
  def first: () -> Model?
           | (Integer count) -> Array[Model]
  def first!: () -> Model
  def second: () -> Model?
  def second!: () -> Model
  def third: () -> Model?
  def third!: () -> Model
  def fourth: () -> Model?
  def fourth!: () -> Model
  def fifth: () -> Model?
  def fifth!: () -> Model
  def forty_two: () -> Model?
  def forty_two!: () -> Model
  def second_to_last: () -> Model?
  def second_to_last!: () -> Model
  def third_to_last: () -> Model?
  def third_to_last!: () -> Model
  def last: () -> Model?
          | (Integer count) -> Array[Model]
  def last!: () -> Model
  def limit: (Integer | Arel::Nodes::SqlLiteral | nil) -> Relation
  def offset: (Integer) -> Relation
  def lock: (?untyped locks) -> Relation
  def find_each: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (Model) -> void } -> nil
               | (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) -> Enumerator[Model, nil]
  def find_in_batches: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (Array[Model]) -> void } -> nil
  def in_batches: (?of: Integer, ?start: Integer, ?finish: Integer, ?load: bool, ?error_on_ignore: bool, ?order: untyped) { (Relation) -> void } -> nil
  def sum: (?untyped? column_name) -> untyped
         | [T] (?T initial_value) { (Model) -> T } -> T
  def destroy_all: () -> untyped
  def delete_all: () -> untyped
  def update_all: (untyped) -> untyped
  def touch_all: (*untyped, ?time: untyped) -> untyped
  def destroy_by: (*untyped) -> untyped
  def delete_by: (*untyped) -> untyped
  def select: (*Symbol | String | Arel::Nodes::t) -> Relation
            | () { (Model) -> boolish } -> Array[Model]
  def reselect: (*Symbol | String | Arel::Nodes::t) -> Relation
  def scope: (Symbol, ^(*untyped, **untyped) [self: Relation] -> void | ActiveRecord::Base::_Callable[Relation]) ?{ (Module extention) [self: Relation] -> void } -> void
  def count: () -> ::Integer
           | () { (Model) -> boolish } -> ::Integer
           | (Symbol | String column_name) -> ::Integer
  def create_with: (nil | Hash[untyped, untyped]) -> Relation
end
