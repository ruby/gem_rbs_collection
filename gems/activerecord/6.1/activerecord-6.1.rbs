module ActiveRecord
  class Base
    module DelegatedType
      def delegated_type: (Symbol role, types: Array[String], **untyped options) -> void
    end
    extend DelegatedType
  end

  module Enum
    def enum: (Hash[Symbol, untyped] definitions) -> void
  end

  class RuntimeRegistry
    extend ActiveSupport::PerThreadRegistry
    attr_accessor sql_runtime: untyped
    def self.sql_runtime: () -> untyped
    def self.sql_runtime=: (untyped) -> untyped
  end

  class ConnectionNotEstablished < ActiveRecordError
  end

  class StatementInvalid < ActiveRecordError
    def initialize: (?untyped? message, ?binds: untyped? binds, ?sql: untyped? sql) -> untyped

    attr_reader sql: untyped

    attr_reader binds: untyped
  end

  class MismatchedForeignKey < StatementInvalid
    def initialize: (?primary_key_column: untyped? primary_key_column, ?primary_key: untyped? primary_key, ?target_table: untyped? target_table, ?foreign_key: untyped? foreign_key, ?table: untyped? table, ?binds: untyped? binds, ?sql: untyped? sql, ?message: untyped? message) -> untyped
  end

  module QueryMethods
    class WhereChain[Relation]
      def missing: (*Symbol associations) -> Relation
    end
  end
end
