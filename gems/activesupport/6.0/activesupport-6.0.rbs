module ActiveSupport
  module Cache
    module Strategy
      module LocalCache
        class LocalCacheRegistry
          def initialize: () -> void
          def cache_for: (untyped local_cache_key) -> untyped
          def set_cache_for: (untyped local_cache_key, untyped value) -> untyped
          def self.set_cache_for: (untyped l, untyped v) -> untyped
          def self.cache_for: (untyped l) -> untyped
          extend ActiveSupport::PerThreadRegistry
        end
      end
    end
  end

  class TimeZone
    # Locate a specific time zone object. If the argument is a string, it
    # is interpreted to mean the name of the timezone to locate. If it is a
    # numeric value it is either the hour offset, or the second offset, of the
    # timezone to find. (The first one with that offset will be returned.)
    # Returns +nil+ if no such time zone is known to the system.
    def self.[]: (String | real | Duration) -> instance?
  end
end
