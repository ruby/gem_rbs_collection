# Runs a code block, and retries it when an exception occurs. It's great when working with flakey webservices (for example).
module Retryable
  # A Retryable configuration object. Must act like a hash and return sensible
  # values for all Retryable configuration options. See Retryable::Configuration.
  def self.configuration=: (Configuration) -> void

  # Call this method to modify defaults in your initializers.
  #
  # @example
  #   Retryable.configure do |config|
  #     config.contexts     = {}
  #     config.ensure       = proc {}
  #     config.exception_cb = proc {}
  #     config.log_method   = proc {}
  #     config.matching     = /.*/
  #     config.not          = []
  #     config.on           = StandardError
  #     config.sleep        = 1
  #     config.sleep_method = ->(seconds) { Kernel.sleep(seconds) }
  #     config.tries        = 2
  #   end
  def self.configure: () { (Configuration) -> void } -> void

  # The configuration object.
  # @see Retryable.configure
  def self.configuration: () -> Configuration

  def self.enabled?: () -> bool
  def self.enable: () -> void
  def self.disable: () -> void

  def self.with_context: [X] (Symbol context_key,
                              ?Configuration::options options,
                              ?contexts: Configuration::contexts?,
                              ?ensure: Configuration::ensure?,
                              ?exception_cb: Configuration::exception_cb?,
                              ?log_method: Configuration::log_method?,
                              ?matching: Configuration::matching?,
                              ?not: Configuration::not?,
                              ?on: Configuration::on?,
                              ?sleep: Configuration::sleep?,
                              ?sleep_method: Configuration::sleep_method?,
                              ?tries: Configuration::tries?,
                             ) ?{ (Integer retries, Exception? retry_exception) -> X } -> X?

  alias self.retryable_with_context self.with_context

  def self.retryable: [X] (?Configuration::options options,
                           ?contexts: Configuration::contexts?,
                           ?ensure: Configuration::ensure?,
                           ?exception_cb: Configuration::exception_cb?,
                           ?log_method: Configuration::log_method?,
                           ?matching: Configuration::matching?,
                           ?not: Configuration::not?,
                           ?on: Configuration::on?,
                           ?sleep: Configuration::sleep?,
                           ?sleep_method: Configuration::sleep_method?,
                           ?tries: Configuration::tries?,
                          ) ?{ (Integer retries, Exception? retry_exception) -> X } -> X?

  # Used to set up and modify settings for the retryable.
  class Configuration
    type option_key = :contexts
                    | :ensure
                    | :exception_cb
                    | :log_method
                    | :matching
                    | :not
                    | :on
                    | :sleep
                    | :sleep_method
                    | :tries

    type options = {
      contexts: contexts?,
      ensure: ensure?,
      exception_cb: exception_cb?,
      log_method: log_method?,
      matching: matching?,
      not: not?,
      on: on?,
      sleep: sleep?,
      sleep_method: sleep_method?,
      tries: tries?
    }

    type contexts = Hash[Symbol, options]
    type ensure = ^(Integer retries) -> void
    type exception_cb = ^(Exception retry_exception) -> void
    type log_method = ^(Integer retries, Exception? retry_exception) -> void
    type matching = String | Regexp | (Array[String | Regexp])
    type not = _Exception | Array[_Exception]
    type on = _Exception | Array[_Exception]
    type sleep = real | (^(Integer retries) -> Numeric)
    type sleep_method = ^(real seconds) -> void
    type tries = Integer

    attr_accessor contexts: contexts
    attr_accessor ensure: ensure
    attr_accessor exception_cb: exception_cb
    attr_accessor log_method: log_method
    attr_accessor matching: matching
    attr_accessor not: not
    attr_accessor on: on
    attr_accessor sleep: sleep
    attr_accessor sleep_method: sleep_method
    attr_accessor tries: tries

    attr_accessor enabled: bool

    def initialize: () -> void

    def enable: () -> void

    alias enabled? enabled

    def disable: () -> void

    # Allows config options to be read like a hash
    #
    # @param [Symbol] option Key for a given attribute
    def []: (option_key option) -> untyped

    # Returns a hash of all configurable options
    def to_hash: () -> options

    # Returns a hash of all configurable options merged with +hash+
    #
    # @param [Hash] hash A set of configuration options that will take precedence over the defaults
    def merge: (options hash) -> options
  end

  # This module holds the Retryable version information.
  module Version
    def major: () -> Integer

    def minor: () -> Integer

    def patch: () -> Integer

    def to_h: () -> { major: Integer, minor: Integer, patch: Integer }

    def to_a: () -> Array[Integer]

    def to_s: () -> String
  end
end
