module RuboCop
  class ConfigLoader
    def self.debug?: () -> boolish
    def self.merge_with_default: (Config, String) -> Config
  end

  class Config
    def initialize: (Hash[untyped, untyped], String) -> void
  end

  module Cop
    class Base
      extend AST::NodePattern::Macros
      include Util

      def self.exclude_from_registry: () -> void
      def self.department: () -> Symbol
      def self.cop_name: () -> String
      def self.documentation_url: (?Config?) -> String
      def self.requires_gem: (String gem_name, *String version_requirements) -> void

      def add_offense: (untyped node, ?message: String, ?severity: Symbol) -> void
                     | (untyped node, ?message: String, ?severity: Symbol) { (Corrector) -> void } -> void
      def cop_config: () -> Hash[String, untyped]
      def processed_source: () -> AST::ProcessedSource
      def target_gem_version: (String gem_name) -> Gem::Version
    end

    class Corrector < Parser::Source::TreeRewriter
    end

    module RangeHelp
      def source_range: (Parser::Source::Buffer source_buffer, Integer line_number, Integer column, ?Integer length) -> Parser::Source::Range
    end

    module IgnoredNode
      def ignore_node: (RuboCop::AST::Node node) -> void
      def part_of_ignored_node?: (RuboCop::AST::Node node) -> bool
    end

    module TargetRubyVersion
      def minimum_target_ruby_version: (Float) -> void
      def maximum_target_ruby_version: (Float) -> void
    end

    module Util
      include PathUtil
    end
  end

  class ProcessedSource = AST::ProcessedSource

  module AutoCorrector
    def support_autocorrect?: () -> true
  end

  module PathUtil
    def smart_path: (String path) -> String
  end
end
