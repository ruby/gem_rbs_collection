module ActiveHash
  class RecordNotFound < StandardError
  end

  class ReservedFieldError < StandardError
  end

  class IdError < StandardError
  end

  class FileTypeMismatchError < StandardError
  end

  class Base
    def self.scope: (Symbol name, untyped) -> void
    def self.all: (?options: untyped) -> Relation[instance]
    def self.data: () -> Array[Hash[untyped, untyped]]
    def self.data=: (Array[Hash[untyped, untyped]]) -> void

    # delegate to all
    def self.where: (*untyped) -> Relation[instance]
    def self.find: (:all) -> Relation[instance]
                 | (:first, *untyped args) -> instance?
                 | (Array[untyped] id) -> Array[instance]
                 | (untyped id) -> instance?
                 | () { (instance) -> boolish } -> instance?
    def self.find_by: (untyped options) -> instance?
    def self.find_by!: (untyped options) -> instance
    def self.find_by_id: (untyped id) -> instance?
    def self.count: () -> Integer
    def self.pluck: (Symbol column_names) -> Array[untyped]
                  | (*Symbol column_names) -> Array[Array[untyped]]
    def self.ids: () -> Array[untyped]
    def self.pick: (Symbol column_names) -> untyped
                 | (*Symbol column_names) -> Array[untyped]
    def self.first: () -> instance?
    def self.last: () -> instance?
    def self.order: (*untyped options) -> Relation[instance]

    def id: () -> untyped?
  end

  class Relation[T]
    include Enumerable[T]

    def each: () { (T) -> untyped } -> self
    def equal?: (untyped other) -> bool
    def ==: (untyped other) -> bool
    def ===: (untyped other) -> bool
    def eql?: (untyped other) -> bool
    def sort!: () -> self
             | () { (T, T) -> Integer } -> self
    def empty?: () -> bool
    def length: () -> Integer
    def first: () -> T?
             | (Integer n) -> Array[T]
    def second: () -> T?
    def third: () -> T?
    def last: () -> T?
            | (Integer n) -> Array[T]
    def sample: () -> T?

    def where: (*untyped) -> self
    def where!: (*untyped) -> self
    def invert_where: () -> self
    def invert_where!: () -> self
    def find: (:all) -> self
            | (:first, *untyped args) -> T?
            | (Array[untyped] id) -> Array[T]
            | (untyped id) -> T?
            | () { (instance) -> boolish } -> T?
    def find_by: (untyped options) -> T?
    def find_by!: (untyped options) -> T
    def find_by_id: (untyped id) -> T?
    def count: () -> Integer
    def size: () -> Integer
    def pluck: (Symbol column_names) -> Array[untyped]
             | (*Symbol column_names) -> Array[Array[untyped]]
    def ids: () -> Array[untyped]
    def pick: (Symbol column_names) -> untyped
            | (*Symbol column_names) -> Array[untyped]
    def order: (*untyped options) -> self
    def order!: (*untyped options) -> self
    def reorder: (*untyped options) -> self
    def reorder!: (*untyped options) -> self
    def reload: () -> self
    def all: () -> self
  end
end
