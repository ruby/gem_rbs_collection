module Protobuf
  module Field
    # The collections have extra type parameter to support Enums.
    # Enum collections allows receiving String, Symbol, and Integers for updates.

    class FieldArray[Elem, WriteElem] < Array[Elem]
      attr_reader field: untyped

      def initialize: (untyped field) -> void

      def <<: (WriteElem? val) -> self?

      def []=: (int index, WriteElem? obj) -> WriteElem?

      def push: (WriteElem? val) -> self?

      def replace: (Array[WriteElem] val) -> self

      # Return a hash-representation of the given values for this field type.
      # The value in this case would be an array.
      def to_hash_value: () -> Array[untyped]

      # Return a hash-representation of the given values for this field type
      # that is safe to convert to JSON.
      # The value in this case would be an array.
      def to_json_hash_value: () -> Array[untyped]

      def to_s: () -> String

      def unshift: (WriteElem? val) -> self?

      private

      def normalize: (untyped value) -> untyped

      def raise_type_error: (untyped val) -> bot
    end

    class FieldHash[Key, Value, WValue] < Hash[Key, Value]
      attr_reader field: untyped

      attr_reader key_field: untyped

      attr_reader value_field: untyped

      def initialize: (untyped field) -> void

      def []=: (Key key, WValue val) -> WValue

      def replace: (Hash[Key, WValue] val) -> void

      def merge!: (Hash[Key, WValue] other) -> void

      # Return a hash-representation of the given values for this field type.
      # The value in this case would be the hash itself, right? Unfortunately
      # not because the values of the map could be messages themselves that we
      # need to transform.
      def to_hash_value: () -> untyped

      # Return a hash-representation of the given values for this field type
      # that is safe to convert to JSON.
      #
      # The value in this case would be the hash itself, right? Unfortunately
      # not because the values of the map could be messages themselves that we
      # need to transform.
      def to_json_hash_value: () -> untyped

      def to_s: () -> ::String

      private

      def normalize_key: (untyped key) -> untyped

      def normalize_val: (untyped value) -> untyped

      def normalize: (untyped what, untyped value, untyped normalize_field) -> untyped

      def fetch_enum: (untyped `type`, untyped val) -> untyped

      def raise_type_error: (untyped val) -> untyped
    end
  end
end
