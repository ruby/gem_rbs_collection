# A subclass of Hash where all keys are converted into Symbols, and
# optionally, all String values are converted into Symbols.
class SymbolHash[unchecked out K, unchecked out V] < ::Hash[untyped, untyped]
  # Creates a new SymbolHash object
  #
  # @param [Boolean] symbolize_value converts any String values into Symbols
  #   if this is set to +true+.
  def initialize: (?bool symbolize_value) -> void
  # @overload [](hash)
  #   Creates a SymbolHash object from an existing Hash
  #
  #   @example
  #     SymbolHash['x' => 1, :y => 2] # => #<SymbolHash:0x...>
  #   @param [Hash] hash the hash object
  #   @return [SymbolHash] a new SymbolHash from a hash object
  #
  # @overload [](*list)
  #   Creates a SymbolHash from an even list of keys and values
  #
  #   @example
  #     SymbolHash[key1, value1, key2, value2, ...]
  #   @param [Array] list an even list of key followed by value
  #   @return [SymbolHash] a new SymbolHash object
  def self.[]: (*untyped hsh) -> untyped
  # Assigns a value to a symbolized key
  # @param [#to_sym] key the key
  # @param [Object] value the value to be assigned. If this is a String and
  #   values are set to be symbolized, it will be converted into a Symbol.
  def []=: (untyped key, untyped value) -> untyped
  # Accessed a symbolized key
  # @param [#to_sym] key the key to access
  # @return [Object] the value associated with the key
  def []: (untyped key) -> untyped
  # Deleted a key and value associated with it
  # @param [#to_sym] key the key to delete
  # @return [void]
  def delete: (untyped key) -> void
  # Tests if a symbolized key exists
  # @param [#to_sym] key the key to test
  # @return [Boolean] whether the key exists
  def key?: (untyped key) -> bool
  # Tests if a symbolized key exists
  # @param [#to_sym] key
  #   the key to test
  # @return [Boolean] whether the key exists
  #
  def has_key?: (untyped key) -> bool
  # Updates the object with the contents of another Hash object.
  # This method modifies the original SymbolHash object
  #
  # @param [Hash] hash the hash object to copy the values from
  # @return [SymbolHash] self
  def update: (Hash[untyped, untyped] hash) -> SymbolHash[K, V]
  # Updates the object with the contents of another Hash object.
  # This method modifies the original SymbolHash object
  # @param [Hash] hash
  #   the hash object to copy the values from
  # @return [SymbolHash] self
  #
  def merge!: (Hash[untyped, untyped] hash) -> SymbolHash[K, V]
  # Merges the contents of another hash into a new SymbolHash object
  #
  # @param [Hash] hash the hash of objects to copy
  # @return [SymbolHash] a new SymbolHash containing the merged data
  def merge: (Hash[untyped, untyped] hash) -> SymbolHash[K, V]
end

module YARD::Templates::Template
  # Includes the {extra_includes} modules into the template object.
  #
  # @param [Template] template the template object to mixin the extra includes.
  # @param [SymbolHash] options the options hash containing all template information
  # @return [void]
  def self.include_extra: (YARD::Templates::Template template, SymbolHash[untyped, untyped] options) -> void
end

# The abstract base serializer. Serializers allow templates to be
# rendered to various endpoints. For instance, a {FileSystemSerializer}
# would allow template contents to be written to the filesystem
#
# To implement a custom serializer, override the following methods:
# * {#serialize}
# * {#serialized_path}
#
# Optionally, a serializer can implement before and after filters:
# * {#before_serialize}
# * {#after_serialize}
#
# @abstract Override this class to implement a custom serializer.
class YARD::Serializers::Base
  # All serializer options are saved so they can be passed to other serializers.
  #
  # @return [SymbolHash] the serializer options
  attr_reader options: SymbolHash[untyped, untyped]
end

# This class maintains all system-wide configuration for YARD and handles
# the loading of plugins. To access options call {options}, and to load
# a plugin use {load_plugin}. All other public methods are used by YARD
# during load time.
#
# == User Configuration Files
#
# Persistent user configuration files can be stored in the file
# +~/.yard/config+, which is read when YARD first loads. The file should
# be formatted as YAML, and should contain a map of keys and values.
#
# Although you can specify any key-value mapping in the configuration file,
# YARD defines special keys specified in {DEFAULT_CONFIG_OPTIONS}.
#
# An example of a configuration file is listed below:
#
#     !!!yaml
#     load_plugins: true # Auto-load plugins when YARD starts
#     ignored_plugins:
#       - yard-broken
#       - broken2 # yard- prefix not necessary
#     autoload_plugins:
#       - yard-rspec
#
# == Automatic Loading of Plugins
#
# YARD 0.6.2 will no longer automatically load all plugins by default. This
# option can be reset by setting 'load_plugins' to true in the configuration
# file. In addition, you can specify a set of specific plugins to load on
# load through the 'autoload_plugins' list setting. This setting is
# independent of the 'load_plugins' value and will always be processed.
#
# == Ignored Plugins File
#
# YARD 0.5 and below used a +~/.yard/ignored_plugins+ file to specify
# plugins to be ignored at load time. Ignored plugins in 0.6.2 and above
# should now be specified in the main configuration file, though YARD
# will support the +ignored_plugins+ file until 0.7.x.
#
# == Safe Mode
#
# YARD supports running in safe-mode. By doing this, it will avoid executing
# any user code such as require files or queries. Plugins will still be
# loaded with safe mode on, because plugins are properly namespaced with
# a 'yard-' prefix, must be installed as a gem, and therefore cannot be
# touched by the user. To specify safe mode, use the +safe_mode+ key.
#
# == Plugin Specific Configuration
#
# Additional settings can be defined within the configuration file
# specifically to provide configuration for a plugin. A plugin that utilizes
# the YARD configuration is strongly encouraged to utilize namespacing of
# their configuration content.
#
#     !!!yaml
#     load_plugins: true # Auto-load plugins when YARD starts
#     ignored_plugins:
#       - yard-broken
#       - broken2 # yard- prefix not necessary
#     autoload_plugins:
#       - yard-rspec
#     # Plugin Specific Configuration
#     yard-sample-plugin:
#       show-results-inline: true
#
# As the configuration is available system wide, it can be
# accessed within the plugin code.
#
#
#     if YARD::Config.options['yard-sample-plugin'] and
#       YARD::Config.options['yard-sample-plugin']['show-results-inline']
#       # ... perform the action that places the results inline ...
#     else
#       # ... do the default behavior of not showing the results inline ...
#     end
#
# When accessing the configuration, be aware that this file is user managed
# so configuration keys and values may not be present. Make no assumptions and
# instead ensure that you check for the existence of keys before proceeding to
# retrieve values.
#
# @since 0.6.2
# @see options
class YARD::Config
  # The system-wide configuration options for YARD
  # @return [SymbolHash] a map a key-value pair settings.
  # @see DEFAULT_CONFIG_OPTIONS
  attr_accessor self.options: SymbolHash[untyped, untyped]
end

# Represents a Ruby method in source
class YARD::CodeObjects::MethodObject < ::YARD::CodeObjects::Base
  # Returns the read/writer info for the attribute if it is one
  # @return [SymbolHash] if there is information about the attribute
  # @return [nil] if the method is not an attribute
  # @since 0.5.3
  def attr_info: () -> SymbolHash[untyped, untyped]?
end
