# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# Read an input stream character by character. We allow for unlimited
# ungetting of characters just read.
#
# We simplify the implementation greatly by reading the entire input
# into a buffer initially, and then simply traversing it using
# pointers.
#
# We also have to allow for the <i>here document diversion</i>. This
# little gem comes about when the lexer encounters a here
# document. At this point we effectively need to split the input
# stream into two parts: one to read the body of the here document,
# the other to read the rest of the input line where the here
# document was initially encountered. For example, we might have
#
#   do_something(<<-A, <<-B)
#     stuff
#     for
#   A
#     stuff
#     for
#   B
#
# When the lexer encounters the <<A, it reads until the end of the
# line, and keeps it around for later. It then reads the body of the
# here document.  Once complete, it needs to read the rest of the
# original line, but then skip the here document body.
#
# @private
class YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader
  # Returns the value of attribute line_num.
  attr_reader line_num: untyped
  def initialize: (untyped content) -> void
  def column: () -> untyped
  def getc: () -> untyped
  def getc_already_read: () -> untyped
  def ungetc: (untyped _ch) -> untyped
  def get_read: () -> untyped
  def peek: (untyped at) -> untyped
  def peek_equal: (untyped str) -> untyped
  def divert_read_from: (untyped reserve) -> untyped
end
