# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# A "code object" is defined as any entity in the Ruby language.
# Classes, modules, methods, class variables and constants are the
# major objects, but DSL languages can create their own by inheriting
# from {CodeObjects::Base}.
module YARD::CodeObjects
  # Registers a separator with an optional set of valid types that
  # must follow the separator lexically.
  #
  # Calls all callbacks defined by {NamespaceMapper.on_invalidate} after
  # the separator is registered.
  #
  # @param sep [String] the separator string for the namespace
  # @param valid_types [Array<Symbol>] a list of object types that
  #   must follow the separator. If the list is empty, any type can
  #   follow the separator.
  # @example Registering separators for a method object
  #   # Anything after a "#" denotes a method object
  #   register_separator "#", :method
  #   # Anything after a "." denotes a method object
  #   register_separator ".", :method
  # @see .on_invalidate
  def register_separator: (String sep, *Array[Symbol] valid_types) -> untyped

  # Unregisters a separator by a type.
  #
  # @param type [Symbol] the type to unregister
  # @see #register_separator
  def unregister_separator_by_type: (Symbol type) -> untyped

  # Clears the map of separators.
  #
  # @return [void]
  def clear_separators: () -> void

  # Gets or sets the default separator value to use when no
  # separator for the namespace can be determined.
  #
  # @param value [String, nil] the default separator, or nil to return the
  #   value
  # @example
  #   default_separator "::"
  def default_separator: (?String? value) -> untyped

  # @return [Array<String>] all of the registered separators
  def separators: () -> Array[String]

  # @return [Regexp] the regexp match of all separators
  def separators_match: () -> Regexp

  # @param sep [String] the separator to return types for
  # @return [Array<Symbol>] a list of types registered to a separator
  def types_for_separator: (String sep) -> Array[Symbol]

  # @param type [String] the type to return separators for
  # @return [Array<Symbol>] a list of separators registered to a type
  def separators_for_type: (String type) -> Array[Symbol]

  # Namespace separator
  NSEP: untyped

  # Regex-quoted namespace separator
  NSEPQ: untyped

  # Instance method separator
  ISEP: untyped

  # Regex-quoted instance method separator
  ISEPQ: untyped

  # Class method separator
  CSEP: untyped

  # Regex-quoted class method separator
  CSEPQ: untyped

  # Regular expression to match constant name
  CONSTANTMATCH: untyped

  # Regular expression to match the beginning of a constant
  CONSTANTSTART: untyped

  # Regular expression to match namespaces (const A or complex path A::B)
  NAMESPACEMATCH: untyped

  # Regular expression to match a method name
  METHODNAMEMATCH: untyped

  # Regular expression to match a fully qualified method def (self.foo, Class.foo).
  METHODMATCH: untyped

  # All builtin Ruby exception classes for inheritance tree.
  BUILTIN_EXCEPTIONS: untyped

  # All builtin Ruby classes for inheritance tree.
  # @note MatchingData is a 1.8.x legacy class
  BUILTIN_CLASSES: untyped

  # All builtin Ruby modules for mixin handling.
  BUILTIN_MODULES: untyped

  # All builtin Ruby classes and modules.
  BUILTIN_ALL: untyped

  # Hash of {BUILTIN_EXCEPTIONS} as keys and true as value (for O(1) lookups)
  BUILTIN_EXCEPTIONS_HASH: untyped

  # @private
  PROXY_MATCH: untyped
end
