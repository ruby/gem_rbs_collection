# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# +Base+ is the superclass of all code objects recognized by YARD. A code
# object is any entity in the Ruby language (class, method, module). A
# DSL might subclass +Base+ to create a new custom object representing
# a new entity type.
#
# == Registry Integration
# Any created object associated with a namespace is immediately registered
# with the registry. This allows the Registry to act as an identity map
# to ensure that no object is represented by more than one Ruby object
# in memory. A unique {#path} is essential for this identity map to work
# correctly.
#
# == Custom Attributes
# Code objects allow arbitrary custom attributes to be set using the
# {#[]=} assignment method.
#
# == Namespaces
# There is a special type of object called a "namespace". These are subclasses
# of the {NamespaceObject} and represent Ruby entities that can have
# objects defined within them. Classically these are modules and classes,
# though a DSL might create a custom {NamespaceObject} to describe a
# specific set of objects.
#
# == Separators
# Custom classes with different separator tokens should define their own
# separators using the {NamespaceMapper.register_separator} method. The
# standard Ruby separators have already been defined ('::', '#', '.', etc).
#
# @abstract This class should not be used directly. Instead, create a
#   subclass that implements {#path}, {#sep} or {#type}. You might also
#   need to register custom separators if {#sep} uses alternate separator
#   tokens.
# @see Registry
# @see #path
# @see #[]=
# @see NamespaceObject
# @see NamespaceMapper.register_separator
class YARD::CodeObjects::Base
  # The files the object was defined in. To add a file, use {#add_file}.
  # @return [Array<Array(String, Integer)>] a list of files
  # @see #add_file
  attr_reader files: Array[[ String, Integer ]]
  # The namespace the object is defined in. If the object is in the
  # top level namespace, this is {Registry.root}
  # @return [NamespaceObject] the namespace object
  attr_accessor namespace: YARD::CodeObjects::NamespaceObject
  # The source code associated with the object
  # @return [String, nil] source, if present, or nil
  attr_accessor source: String?
  # Language of the source code associated with the object. Defaults to
  # +:ruby+.
  #
  # @return [Symbol] the language type
  attr_accessor source_type: Symbol
  # The one line signature representing an object. For a method, this will
  # be of the form "def meth(arguments...)". This is usually the first
  # source line.
  #
  # @return [String] a line of source
  attr_accessor signature: String
  # The non-localized documentation string associated with the object
  # @return [Docstring] the documentation string
  # @since 0.8.4
  attr_reader base_docstring: YARD::Docstring
  # Marks whether or not the method is conditionally defined at runtime
  # @return [Boolean] true if the method is conditionally defined at runtime
  attr_accessor dynamic: bool
  # @return [String] the group this object is associated with
  # @since 0.6.0
  attr_accessor group: String
  # @return [Symbol] the visibility of an object (:public, :private, :protected)
  attr_accessor visibility: Symbol
  # Is the object defined conditionally at runtime?
  # @see #dynamic
  def dynamic?: () -> bool
  # Allocates a new code object
  # @return [Base]
  # @see #initialize
  def self.new: (untyped namespace, untyped name, *untyped args) -> YARD::CodeObjects::Base
  # Compares the class with subclasses
  #
  # @param [Object] other the other object to compare classes with
  # @return [Boolean] true if other is a subclass of self
  def self.===: (untyped other) -> bool
  # Creates a new code object
  #
  # @example Create a method in the root namespace
  #   CodeObjects::Base.new(:root, '#method') # => #<yardoc method #method>
  # @example Create class Z inside namespace X::Y
  #   CodeObjects::Base.new(P("X::Y"), :Z) # or
  #   CodeObjects::Base.new(Registry.root, "X::Y")
  # @param [NamespaceObject] namespace the namespace the object belongs in,
  #   {Registry.root} or :root should be provided if it is associated with
  #   the top level namespace.
  # @param [Symbol, String] name the name (or complex path) of the object.
  # @yield [self] a block to perform any extra initialization on the object
  # @yieldparam [Base] self the newly initialized code object
  # @return [Base] the newly created object
  def initialize: (YARD::CodeObjects::NamespaceObject namespace, Symbol | String name, *untyped) { (YARD::CodeObjects::Base self) -> untyped } -> void
  # Copies all data in this object to another code object, except for
  # uniquely identifying information (path, namespace, name, scope).
  #
  # @param [Base] other the object to copy data to
  # @return [Base] the other object
  # @since 0.8.0
  def copy_to: (YARD::CodeObjects::Base other) -> YARD::CodeObjects::Base
  # The name of the object
  # @param [Boolean] prefix whether to show a prefix. Implement
  #   this in a subclass to define how the prefix is showed.
  # @return [Symbol] if prefix is false, the symbolized name
  # @return [String] if prefix is true, prefix + the name as a String.
  #   This must be implemented by the subclass.
  def name: (?bool prefix) -> (Symbol | String)
  # Associates a file with a code object, optionally adding the line where it was defined.
  # By convention, '<stdin>' should be used to associate code that comes form standard input.
  #
  # @param [String] file the filename ('<stdin>' for standard input)
  # @param [Fixnum, nil] line the line number where the object lies in the file
  # @param [Boolean] has_comments whether or not the definition has comments associated. This
  #   will allow {#file} to return the definition where the comments were made instead
  #   of any empty definitions that might have been parsed before (module namespaces for instance).
  def add_file: (String file, ?Integer? line, ?bool has_comments) -> untyped
  # Returns the filename the object was first parsed at, taking
  # definitions with docstrings first.
  #
  # @return [String] a filename
  def file: () -> String
  # Returns the line the object was first parsed at (or nil)
  #
  # @return [Fixnum] the line where the object was first defined.
  # @return [nil] if there is no line associated with the object
  def line: () -> Integer?
  # Tests if another object is equal to this, including a proxy
  # @param [Base, Proxy] other if other is a {Proxy}, tests if
  #   the paths are equal
  # @return [Boolean] whether or not the objects are considered the same
  def equal?: (YARD::CodeObjects::Base | YARD::CodeObjects::Proxy other) -> bool
  # Tests if another object is equal to this, including a proxy
  # @param [Base, Proxy] other
  #   if other is a {Proxy}, tests if
  #   the paths are equal
  # @return [Boolean] whether or not the objects are considered the same
  #
  def ==: (YARD::CodeObjects::Base | YARD::CodeObjects::Proxy other) -> bool
  # Tests if another object is equal to this, including a proxy
  # @param [Base, Proxy] other
  #   if other is a {Proxy}, tests if
  #   the paths are equal
  # @return [Boolean] whether or not the objects are considered the same
  #
  def eql?: (YARD::CodeObjects::Base | YARD::CodeObjects::Proxy other) -> bool
  # @return [Integer] the object's hash value (for equality checking)
  def hash: () -> Integer
  # @return [nil] this object does not turn into an array
  def to_ary: () -> nil
  # Accesses a custom attribute on the object
  # @param [#to_s] key the name of the custom attribute
  # @return [Object, nil] the custom attribute or nil if not found.
  # @see #[]=
  def []: (untyped key) -> untyped
  # Sets a custom attribute on the object
  # @param [#to_s] key the name of the custom attribute
  # @param [Object] value the value to associate
  # @return [void]
  # @see #[]
  def []=: (untyped key, untyped value) -> void
  # @overload dynamic_attr_name
  #   @return the value of attribute named by the method attribute name
  #   @raise [NoMethodError] if no method or custom attribute exists by
  #     the attribute name
  #   @see #[]
  # @overload dynamic_attr_name=(value)
  #   @param value a value to set
  #   @return +value+
  #   @see #[]=
  def method_missing: (untyped meth, *untyped args) -> untyped
  # The documentation string associated with the object
  #
  # @param [String, I18n::Locale] locale (I18n::Locale.default)
  #   the locale of the documentation string.
  # @return [Docstring] the documentation string
  def docstring: (?String | YARD::I18n::Locale locale) -> YARD::Docstring
  # Attaches a docstring to a code object by parsing the comments attached to the statement
  # and filling the {#tags} and {#docstring} methods with the parsed information.
  #
  # @param [String, Array<String>, Docstring] comments
  #   the comments attached to the code object to be parsed
  #   into a docstring and meta tags.
  def docstring=: (Array[String] | String | YARD::Docstring comments) -> untyped
  # Default type is the lowercase class name without the "Object" suffix.
  # Override this method to provide a custom object type
  #
  # @return [Symbol] the type of code object this represents
  def type: () -> Symbol
  # Represents the unique path of the object. The default implementation
  # joins the path of {#namespace} with {#name} via the value of {#sep}.
  # Custom code objects should ensure that the path is unique to the code
  # object by either overriding {#sep} or this method.
  #
  # @example The path of an instance method
  #   MethodObject.new(P("A::B"), :c).path # => "A::B#c"
  # @return [String] the unique path of the object
  # @see #sep
  def path: () -> String
  # Represents the unique path of the object. The default implementation
  # joins the path of {#namespace} with {#name} via the value of {#sep}.
  # Custom code objects should ensure that the path is unique to the code
  # object by either overriding {#sep} or this method.
  # @example The path of an instance method
  #   MethodObject.new(P("A::B"), :c).path # => "A::B#c"
  # @return [String] the unique path of the object
  # @see #sep
  #
  def to_s: () -> String
  # @note
  #   Override this method if your object has a special title that does
  #   not match the {#path} attribute value. This title will be used
  #   when linking or displaying the object.
  # @return [String] the display title for an object
  # @see 0.8.4
  def title: () -> String
  # @param [Base, String] other another code object (or object path)
  # @return [String] the shortest relative path from this object to +other+
  # @since 0.5.3
  def relative_path: (YARD::CodeObjects::Base | String other) -> String
  # Renders the object using the {Templates::Engine templating system}.
  #
  # @example Formats a class in plaintext
  #   puts P('MyClass').format
  # @example Formats a method in html with rdoc markup
  #   puts P('MyClass#meth').format(:format => :html, :markup => :rdoc)
  # @param [Hash] options a set of options to pass to the template
  # @option options [Symbol] :format (:text) :html, :text or another output format
  # @option options [Symbol] :template (:default) a specific template to use
  # @option options [Symbol] :markup (nil) the markup type (:rdoc, :markdown, :textile)
  # @option options [Serializers::Base] :serializer (nil) see Serializers
  # @return [String] the rendered template
  # @see Templates::Engine#render
  def format: (?Hash[untyped, untyped] options) -> String
  # Inspects the object, returning the type and path
  # @return [String] a string describing the object
  def inspect: () -> String
  # The namespace the object is defined in. If the object is in the
  # top level namespace, this is {Registry.root}
  # @return [NamespaceObject] the namespace object
  #
  def parent: () -> YARD::CodeObjects::NamespaceObject
  # Sets the namespace the object is defined in.
  # @param [NamespaceObject, :root, nil] obj
  #   the new namespace (:root
  #   for {Registry.root}). If obj is nil, the object is unregistered
  #   from the Registry.
  #
  def parent=: (untyped obj) -> untyped
  # Gets a tag from the {#docstring}
  # @see Docstring#tag
  def tag: (untyped name) -> untyped
  # Gets a list of tags from the {#docstring}
  # @see Docstring#tags
  def tags: (?untyped name) -> untyped
  # Tests if the {#docstring} has a tag
  # @see Docstring#has_tag?
  def has_tag?: (untyped name) -> bool
  # Add tags to the {#docstring}
  # @see Docstring#add_tag
  # @since 0.8.4
  def add_tag: (*untyped tags) -> untyped
  # @return whether or not this object is a RootObject
  def root?: () -> bool
  # Override this method with a custom component separator. For instance,
  # {MethodObject} implements sep as '#' or '.' (depending on if the
  # method is instance or class respectively). {#path} depends on this
  # value to generate the full path in the form: namespace.path + sep + name
  #
  # @return [String] the component that separates the namespace path
  #   and the name (default is {NSEP})
  def sep: () -> String
  # Override this method if your code object subclass does not allow
  # copying of certain attributes.
  #
  # @return [Array<String>] the list of instance variable names (without
  #   "@" prefix) that should be copied when {#copy_to} is called
  # @see #copy_to
  # @since 0.8.0
  def copyable_attributes: () -> Array[String]
  # Formats source code by removing leading indentation
  #
  # @param [String] source the source code to format
  # @return [String] formatted source
  private def format_source: (String source) -> String
  private def translate_docstring: (untyped locale) -> untyped
end
