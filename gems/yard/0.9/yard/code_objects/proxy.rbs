# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# The Proxy class is a way to lazily resolve code objects in
# cases where the object may not yet exist. A proxy simply stores
# an unresolved path until a method is called on the object, at which
# point it does a lookup using {Registry.resolve}. If the object is
# not found, a warning is raised and {ProxyMethodError} might be raised.
#
# @example Creates a Proxy to the String class from a module
#   # When the String class is parsed this method will
#   # begin to act like the String ClassObject.
#   Proxy.new(mymoduleobj, "String")
# @see Registry.resolve
# @see ProxyMethodError
class YARD::CodeObjects::Proxy
  # Returns the value of attribute namespace.
  attr_reader namespace: untyped
  def self.===: (untyped other) -> untyped
  # Returns the value of attribute namespace.
  #
  def parent: () -> untyped
  # Creates a new Proxy
  #
  # @raise [ArgumentError] if namespace is not a NamespaceObject
  # @return [Proxy] self
  def initialize: (untyped namespace, untyped name, ?untyped type) -> void
  # The name of the object
  # @param [Boolean] prefix whether to show a prefix. Implement
  #   this in a subclass to define how the prefix is showed.
  # @return [Symbol] if prefix is false, the symbolized name
  # @return [String] if prefix is true, prefix + the name as a String.
  #   This must be implemented by the subclass.
  #
  def name: (?bool prefix) -> (Symbol | String)
  # Returns a text representation of the Proxy
  # @return [String] the object's #inspect method or P(OBJECTPATH)
  def inspect: () -> String
  # If the proxy resolves to an object, returns its path, otherwise
  # guesses at the correct path using the original namespace and name.
  #
  # @return [String] the assumed path of the proxy (or the real path
  #   of the resolved object)
  def path: () -> String
  # If the proxy resolves to an object, returns its path, otherwise
  # guesses at the correct path using the original namespace and name.
  # @return [String] the assumed path of the proxy (or the real path
  #   of the resolved object)
  #
  def to_s: () -> String
  # If the proxy resolves to an object, returns its path, otherwise
  # guesses at the correct path using the original namespace and name.
  # @return [String] the assumed path of the proxy (or the real path
  #   of the resolved object)
  #
  def to_str: () -> String
  # If the proxy resolves to an object, returns its path, otherwise
  # guesses at the correct path using the original namespace and name.
  # @return [String] the assumed path of the proxy (or the real path
  #   of the resolved object)
  #
  def title: () -> String
  # @return [Boolean]
  def is_a?: (untyped klass) -> bool
  # @return [Boolean]
  def ===: (untyped other) -> bool
  # @return [Boolean]
  def <=>: (untyped other) -> bool
  # @return [Boolean]
  def equal?: (untyped other) -> bool
  # @return [Boolean] 
  #
  def ==: (untyped other) -> bool
  # @return [Integer] the object's hash value (for equality checking)
  def hash: () -> Integer
  # Returns the class name of the object the proxy is mimicking, if
  # resolved. Otherwise returns +Proxy+.
  # @return [Class] the resolved object's class or +Proxy+
  def class: () -> Class
  # Returns the type of the proxy. If it cannot be resolved at the
  # time of the call, it will either return the inferred proxy type
  # (see {#type=}) or +:proxy+
  # @return [Symbol] the Proxy's type
  # @see #type=
  def type: () -> Symbol
  # Allows a parser to infer the type of the proxy by its path.
  # @param [#to_sym] type the proxy's inferred type
  # @return [void]
  def type=: (untyped type) -> void
  # @return [Boolean]
  def instance_of?: (untyped klass) -> bool
  # @return [Boolean]
  def kind_of?: (untyped klass) -> bool
  # @return [Boolean]
  def respond_to?: (untyped meth, ?untyped include_private) -> bool
  # Dispatches the method to the resolved object.
  #
  # @raise [ProxyMethodError] if the proxy cannot find the real object
  def method_missing: (untyped meth, *untyped args) -> untyped
  # This class is never a root object
  def root?: () -> bool
  # @note this method fixes a bug in 1.9.2: http://gist.github.com/437136
  private def to_ary: () -> untyped
  # Attempts to find the object that this unresolved object
  # references by checking if any objects by this name are
  # registered all the way up the namespace tree.
  #
  # @return [Base, nil] the registered code object or nil
  private def to_obj: () -> YARD::CodeObjects::Base?
  private def proxy_path: () -> untyped
end
