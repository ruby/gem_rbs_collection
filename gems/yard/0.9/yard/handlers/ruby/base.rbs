# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# This is the base handler class for the new-style (1.9) Ruby parser.
# All handlers that subclass this base class will be used when the
# new-style parser is used. For implementing legacy handlers, see
# {Legacy::Base}.
#
# @abstract See {Handlers::Base} for subclassing information.
# @see Handlers::Base
# @see Legacy::Base
class YARD::Handlers::Ruby::Base < ::YARD::Handlers::Base
  # Matcher for handling any type of method call. Method calls can
  # be expressed by many {AstNode} types depending on the syntax
  # with which it is called, so YARD allows you to use this matcher
  # to simplify matching a method call.
  #
  # @example Match the "describe" method call
  #   handles method_call(:describe)
  #
  #   # The following will be matched:
  #   # describe(...)
  #   # object.describe(...)
  #   # describe "argument" do ... end
  #
  # @param [#to_s] name matches the method call of this name
  # @return [void]
  def self.method_call: (?untyped name) -> void
  # Matcher for handling a node with a specific meta-type. An {AstNode}
  # has a {AstNode#type} to define its type but can also be associated
  # with a set of types. For instance, +:if+ and +:unless+ are both
  # of the meta-type +:condition+.
  #
  # A meta-type is any method on the {AstNode} class ending in "?",
  # though you should not include the "?" suffix in your declaration.
  # Some examples are: "condition", "call", "literal", "kw", "token",
  # "ref".
  #
  # @example Handling any conditional statement (if, unless)
  #   handles meta_type(:condition)
  # @param [Symbol] type the meta-type to match. A meta-type can be
  #   any method name + "?" that {AstNode} responds to.
  # @return [void]
  def self.meta_type: (Symbol type) -> void
  # @return [Boolean] whether or not an {AstNode} object should be
  #   handled by this handler
  def self.handles?: (untyped node) -> bool
  # @group Parsing an Inner Block
  def parse_block: (untyped inner_node, ?untyped opts) -> untyped
  # @group Macro Handling
  def call_params: () -> untyped
  def caller_method: () -> untyped
  # Builds and s-expression by creating {AstNode} objects with
  # the type provided by the first argument.
  #
  # @example An implicit list of keywords
  #   ast = s(s(:kw, "if"), s(:kw, "else"))
  #   ast.type # => :list
  # @example A method call
  #   s(:command, s(:var_ref, "mymethod"))
  #
  # @overload s(*nodes, opts = {})
  #   @param [Array<AstNode>] nodes a list of nodes.
  #   @param [Hash] opts any extra options (docstring, file, source) to
  #     set on the object
  #   @return [AstNode] an implicit node where node.type == +:list+
  # @overload s(type, *children, opts = {})
  #   @param [Symbol] type the node type
  #   @param [Array<AstNode>] children any child nodes inside this one
  #   @param [Hash] opts any extra options to set on the object
  #   @return [AstNode] a node of type +type+.
  # @see AstNode#initialize
  def s: (*untyped args) -> untyped
end
