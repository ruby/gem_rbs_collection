# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# Handles any constant assignment
class YARD::Handlers::Ruby::ConstantHandler < ::YARD::Handlers::Ruby::Base
  #
  # @!method process
  # Main processing callback
  # @return [void]
  def process: () -> void
  private def process_constant: (untyped statement) -> untyped
  private def process_structclass: (untyped statement) -> untyped
  # Extract the parameters from the Struct.new AST node, returning them as a list
  # of strings
  #
  # @param [MethodCallNode] superclass the AST node for the Struct.new call
  # @return [Array<String>] the member names to generate methods for
  private def extract_parameters: (YARD::Parser::Ruby::MethodCallNode superclass) -> Array[String]
  # Extracts the user's defined @member tag for a given class and its member. Returns
  # nil if the user did not define a @member tag for this struct entry.
  #
  # @param [ClassObject] klass the class whose tags we're searching
  # @param [String] member the name of the struct member we need
  # @param [Symbol] type reader method, or writer method?
  # @return [Tags::Tag, nil] the tag matching the request, or nil if not found
  def member_tag_for_member: (YARD::CodeObjects::ClassObject klass, String member, ?Symbol type) -> YARD::Tags::Tag?
  # Retrieves all members defined in @attr* tags
  #
  # @param [ClassObject] klass the class with the attributes
  # @return [Array<String>] the list of members defined as attributes on the class
  def members_from_tags: (YARD::CodeObjects::ClassObject klass) -> Array[String]
  # Determines whether to create an attribute method based on the class's
  # tags.
  #
  # @param [ClassObject] klass the class whose tags we're searching
  # @param [String] member the name of the struct member we need
  # @param [Symbol] type (:read) reader method, or writer method?
  # @return [Boolean] should the attribute be created?
  def create_member_method?: (YARD::CodeObjects::ClassObject klass, String member, ?Symbol type) -> bool
  # Gets the return type for the member in a nicely formatted string. Used
  # to be injected into auto-generated docstrings.
  #
  # @param [Tags::Tag] member_tag the tag object to check for types
  # @return [String] the user-declared type of the struct member, or [Object] if
  #   the user did not define a type for this member.
  def return_type_from_tag: (YARD::Tags::Tag member_tag) -> String
  # Creates the auto-generated docstring for the getter method of a struct's
  # member. This is used so the generated documentation will look just like that
  # of an attribute defined using attr_accessor.
  #
  # @param [ClassObject] klass the class whose members we're working with
  # @param [String] member the name of the member we're generating documentation for
  # @return [String] a docstring to be attached to the getter method for this member
  def add_reader_tags: (YARD::CodeObjects::ClassObject klass, untyped new_method, String member) -> String
  # Creates the auto-generated docstring for the setter method of a struct's
  # member. This is used so the generated documentation will look just like that
  # of an attribute defined using attr_accessor.
  #
  # @param [ClassObject] klass the class whose members we're working with
  # @param [String] member the name of the member we're generating documentation for
  # @return [String] a docstring to be attached to the setter method for this member
  def add_writer_tags: (YARD::CodeObjects::ClassObject klass, untyped new_method, String member) -> String
  # Creates and registers a class object with the given name and superclass name.
  # Returns it for further use.
  #
  # @param [String] classname the name of the class
  # @param [String] superclass the name of the superclass
  # @return [ClassObject] the class object for further processing/method attaching
  def create_class: (String classname, String superclass) -> YARD::CodeObjects::ClassObject
  # Creates the setter (writer) method and attaches it to the class as an attribute.
  # Also sets up the docstring to prettify the documentation output.
  #
  # @param [ClassObject] klass the class to attach the method to
  # @param [String] member the name of the member we're generating a method for
  def create_writer: (YARD::CodeObjects::ClassObject klass, String member) -> untyped
  # Creates the getter (reader) method and attaches it to the class as an attribute.
  # Also sets up the docstring to prettify the documentation output.
  #
  # @param [ClassObject] klass the class to attach the method to
  # @param [String] member the name of the member we're generating a method for
  def create_reader: (YARD::CodeObjects::ClassObject klass, String member) -> untyped
  # Creates the given member methods and attaches them to the given ClassObject.
  #
  # @param [ClassObject] klass the class to generate attributes for
  # @param [Array<String>] members a list of member names
  def create_attributes: (YARD::CodeObjects::ClassObject klass, Array[String] members) -> untyped
end
