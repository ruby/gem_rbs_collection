# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# Implements a serializer that reads from and writes to the filesystem.
class YARD::Serializers::FileSystemSerializer < ::YARD::Serializers::Base
  # The base path to write data to.
  # @return [String] a base path
  attr_accessor basepath: String
  # The extension of the filename (defaults to +html+)
  #
  # @return [String] the extension of the file. Empty string for no extension.
  attr_accessor extension: String
  # Creates a new FileSystemSerializer with options
  #
  # @option opts [String] :basepath ('doc') the base path to write data to
  # @option opts [String] :extension ('html') the extension of the serialized
  #   path filename. If this is set to the empty string, no extension is used.
  def initialize: (?Hash[untyped, untyped] opts) -> void
  # Serializes object with data to its serialized path (prefixed by the +#basepath+).
  #
  # @return [String] the written data (for chaining)
  def serialize: (untyped object, untyped data) -> String
  # Implements the serialized path of a code object.
  #
  # @param [CodeObjects::Base, CodeObjects::ExtraFileObject, String] object
  #   the object to get a path for. The path of a string is the string itself.
  # @return [String] if object is a String, returns
  #   object, otherwise the path on disk (without the basepath).
  def serialized_path: (YARD::CodeObjects::Base | YARD::CodeObjects::ExtraFileObject | String object) -> String
  # Checks the disk for an object and returns whether it was serialized.
  #
  # @param [CodeObjects::Base] object the object to check
  # @return [Boolean] whether an object has been serialized to disk
  def exists?: (YARD::CodeObjects::Base object) -> bool
  # Builds a filename mapping from object paths to filesystem path names.
  # Needed to handle case sensitive YARD objects mapped into a case
  # insensitive filesystem. Uses with {#mapped_name} to determine the
  # mapping name for a given object.
  #
  # @note In order to use filesystem name mapping, you must initialize
  #   the serializer object after preparing the {YARD::Registry}.
  private def build_filename_map: () -> untyped
  # @return [String] the filesystem mapped name of a given object.
  private def mapped_name: (untyped object) -> String
  # Remove special chars from filenames.
  # Windows disallows \ / : * ? " < > | but we will just remove any
  # non alphanumeric (plus period, underscore and dash).
  private def encode_path_components: (*untyped components) -> untyped
end
