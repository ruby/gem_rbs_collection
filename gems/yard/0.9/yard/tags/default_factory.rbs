# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

class YARD::Tags::DefaultFactory
  # Parses tag text and creates a new tag with descriptive text
  #
  # @param tag_name        the name of the tag to parse
  # @param [String] text   the raw tag text
  # @return [Tag]          a tag object with the tag_name and text values filled
  def parse_tag: (untyped tag_name, String text) -> YARD::Tags::Tag
  # Parses tag text and creates a new tag with a key name and descriptive text
  #
  # @param tag_name        the name of the tag to parse
  # @param [String] text   the raw tag text
  # @return [Tag]          a tag object with the tag_name, name and text values filled
  def parse_tag_with_name: (untyped tag_name, String text) -> YARD::Tags::Tag
  # Parses tag text and creates a new tag with formally declared types and
  # descriptive text
  #
  # @param tag_name        the name of the tag to parse
  # @param [String] text   the raw tag text
  # @return [Tag]          a tag object with the tag_name, types and text values filled
  def parse_tag_with_types: (untyped tag_name, String text) -> YARD::Tags::Tag
  # Parses tag text and creates a new tag with formally declared types, a key
  # name and descriptive text
  #
  # @param tag_name        the name of the tag to parse
  # @param [String] text   the raw tag text
  # @return [Tag]          a tag object with the tag_name, name, types and text values filled
  def parse_tag_with_types_and_name: (untyped tag_name, String text) -> YARD::Tags::Tag
  # Parses tag text and creates a new tag with formally declared types, a title
  # on the first line and descriptive text
  #
  # @param tag_name        the name of the tag to parse
  # @param [String] text   the raw tag text
  # @return [Tag]          a tag object with the tag_name, name, types and text values filled
  def parse_tag_with_types_and_title: (untyped tag_name, String text) -> YARD::Tags::Tag
  def parse_tag_with_title_and_text: (untyped tag_name, untyped text) -> untyped
  def parse_tag_with_types_name_and_default: (untyped tag_name, untyped text) -> untyped
  def parse_tag_with_options: (untyped tag_name, untyped text) -> untyped
  # Extracts the name from raw tag text returning the name and remaining value
  #
  # @param [String] text the raw tag text
  # @return [Array] an array holding the name as the first element and the
  #                 value as the second element
  private def extract_name_from_text: (String text) -> Array[untyped]
  private def extract_title_and_desc_from_text: (untyped text) -> untyped
  # Parses a [], <>, {} or () block at the beginning of a line of text
  # into a list of comma delimited values.
  #
  # @example
  #   obj.parse_types('[String, Array<Hash, String>, nil]') # => [nil, ['String', 'Array<Hash, String>', 'nil'], ""]
  #   obj.parse_types('b<String> A string') # => ['b', ['String'], 'A string']
  #
  # @return [Array(String, Array<String>, String)] the text before the type
  #   list (or nil), followed by the type list parsed into an array of
  #   strings, followed by the text following the type list.
  private def extract_types_and_name_from_text: (untyped text, ?untyped opening_types, ?untyped closing_types) -> [ String, Array[String], String ]
  private def extract_types_and_name_from_text_unstripped: (untyped text, ?untyped opening_types, ?untyped closing_types) -> untyped
  TYPELIST_OPENING_CHARS: untyped
  TYPELIST_CLOSING_CHARS: untyped
end
