# !!! GENERATED FILE !!!
# Please see generators/yard-generator/README.md

# Keeps track of all the registered meta-data tags and directives.
# Also allows for defining of custom tags and customizing the tag parsing
# syntax.
#
# == Defining Custom Meta-Data Tags
#
# To define a custom tag, use {define_tag}. You should pass the tag
# name and the factory method to use when creating the tag. If you do not
# provide a factory method to use, it will default to {DefaultFactory#parse_tag}
#
# You can also define tag objects manually by simply implementing a "tagname_tag"
# method that returns a {Tag} object, but they will not take advantage of tag factory
# parsing:
#
#   def mytag_tag(text)
#     Tag.new(:mytag, text)
#   end
#
# == Defining Custom Directives
#
# Directives can be defined by calling the {define_directive} method, taking
# the directive name, an optional tag factory parser method (to parse the
# data in the directive into a temporary {Tag} object) and a {Directive} subclass
# that performs the directive processing. For more information on creating a
# Directive subclass, see the {Directive} class documentation.
#
# Similar to tags, Directives can also be defined manually, in this case using
# the method name "mydirective_directive" and returning a new {Directive} object:
#
#   def mydirective_directive(tag, parser)
#     MyDirective.new(tag, parser)
#   end
#
# == Namespaced Tags
#
# In YARD 0.8.0+, tags can be namespaced using the '.' character. It is recommended
# to namespace project specific tags, like +@yard.tag_name+, so that tags do not
# collide with other plugins or new built-in tags.
#
# == Adding/Changing the Tag Syntax
#
# If you have specialized tag parsing needs you can substitute the {#factory}
# object with your own by setting {Library.default_factory= Library.default_factory}
# to a new class with its own parsing methods before running YARD. This is useful
# if you want to change the syntax of existing tags (@see, @since, etc.)
#
# @example Defining a custom tag
#   define_tag "Parameter", :param, :with_types_and_name
#   define_tag "Author", :author
# @example Defining a custom directive
#   define_directive :method, :with_title_and_text, MethodDirective
# @see DefaultFactory
# @see define_tag
# @see define_directive
# @see Directive
class YARD::Tags::Library
  # @return [SymbolHash{Symbol=>String}] the map of tag names and their
  #   respective display labels.
  attr_reader self.labels: SymbolHash[Symbol, String]
  # @!attribute instance
  # @return [Library] the main Library instance object.
  attr_accessor self.instance: YARD::Tags::Library
  # @!attribute default_factory
  # Replace the factory object responsible for parsing tags by setting
  # this to an object (or class) that responds to +parse_TAGNAME+ methods
  # where +TAGNAME+ is the name of the tag.
  #
  # You should set this value before performing any source parsing with
  # YARD, otherwise your factory class will not be used.
  #
  # @example
  #   YARD::Tags::Library.default_factory = MyFactory
  #
  # @see DefaultFactory
  attr_accessor self.default_factory: untyped
  # Sets the list of tags to display when rendering templates. The order of
  # tags in the list is also significant, as it represents the order that
  # tags are displayed in templates.
  #
  # You can use the {Array#place} to insert new tags to be displayed in
  # the templates at specific positions:
  #
  #   Library.visible_tags.place(:mytag).before(:return)
  #
  # @return [Array<Symbol>] a list of ordered tags
  # @since 0.6.0
  attr_accessor self.visible_tags: Array[Symbol]
  # Sets the list of tags that should apply to any children inside the
  # namespace they are defined in. For instance, a "@since" tag should
  # apply to all methods inside a module it is defined in. Transitive
  # tags can be overridden by directly defining a tag on the child object.
  #
  # @return [Array<Symbol>] a list of transitive tags
  # @since 0.6.0
  attr_accessor self.transitive_tags: Array[Symbol]
  # A factory class to handle parsing of tags, defaults to {default_factory}
  attr_accessor factory: untyped
  # Returns the factory method used to parse the tag text for a specific tag
  #
  # @param [Symbol] tag the tag name
  # @return [Symbol] the factory method name for the tag
  # @return [Class<Tag>,Symbol] the Tag class to use to parse the tag
  #   or the method to call on the factory class
  # @return [nil] if the tag is freeform text
  # @since 0.6.0
  def self.factory_method_for: (Symbol tag) -> (Symbol | singleton(YARD::Tags::Tag))?
  # Returns the factory method used to parse the tag text for a specific
  # directive
  #
  # @param [Symbol] directive the directive name
  # @return [Symbol] the factory method name for the tag
  # @return [Class<Tag>,Symbol] the Tag class to use to parse the tag or
  #   the methods to call on the factory class
  # @return [nil] if the tag is freeform text
  # @since 0.8.0
  def self.factory_method_for_directive: (Symbol directive) -> (Symbol | singleton(YARD::Tags::Tag))?
  # Sorts the labels lexically by their label name, often used when displaying
  # the tags.
  #
  # @return [Array<Symbol>, String] the sorted labels as an array of the tag name and label
  def self.sorted_labels: () -> (Array[Symbol] | String)
  # Convenience method to define a new tag using one of {Tag}'s factory methods, or the
  # regular {DefaultFactory#parse_tag} factory method if none is supplied.
  #
  # @!macro [attach] yard.tag
  #   @!method $2_tag
  #   @!visibility private
  #   @yard.tag $2 [$3] $1
  # @param [#to_s] label the label used when displaying the tag in templates
  # @param [#to_s] tag the tag name to create
  # @param [#to_s, Class<Tag>] meth the {Tag} factory method to call when
  #   creating the tag or the name of the class to directly create a tag for
  def self.define_tag: (untyped label, untyped tag, ?untyped meth) -> untyped
  # @macro [attach] yard.directive
  #   @!method $1_directive
  #   @!visibility private
  #   @yard.directive $1 [$2] $-1
  # @overload define_directive(tag, tag_meth = nil, directive_class)
  #   Convenience method to define a new directive using a {Tag} factory
  #   method and {Directive} subclass that implements the directive
  #   callbacks.
  #
  #   @param [#to_s] tag the tag name of the directive
  #   @param [#to_s] tag_meth the tag factory method to use when
  #     parsing tag information
  #   @param [Class<Directive>] the directive class that implements the
  #     directive behaviour
  #   @see define_tag
  def self.define_directive: (untyped tag, ?untyped tag_meth, ?untyped directive_class) -> untyped
  def self.tag_method_name: (untyped tag_name) -> untyped
  def self.directive_method_name: (untyped tag_name) -> untyped
  private def self.tag_or_directive_method_name: (untyped tag_name, ?untyped type) -> untyped
  private def send_to_factory: (untyped tag_name, untyped meth, untyped text) -> untyped
  # @return [Directive]
  private def directive_call: (untyped tag, untyped parser) -> YARD::Tags::Directive
  def initialize: (?untyped factory) -> void
  # @param [#to_s] tag_name the name of the tag to look for
  # @return [Boolean] whether a tag by the given name is registered in
  #   the library.
  def has_tag?: (untyped tag_name) -> bool
  # Creates a new {Tag} object with a given tag name and data
  # @return [Tag] the newly created tag object
  def tag_create: (untyped tag_name, untyped tag_buf) -> YARD::Tags::Tag
  # @param [#to_s] tag_name the name of the tag to look for
  # @return [Boolean] whether a directive by the given name is registered in
  #   the library.
  def has_directive?: (untyped tag_name) -> bool
  # Creates a new directive with tag information and a docstring parser
  # object.
  # @param [String] tag_name the name of the tag
  # @param [String] tag_buf the tag data
  # @param [DocstringParser] parser the parser object parsing the docstring
  # @return [Directive] the newly created directive
  def directive_create: (String tag_name, String tag_buf, YARD::DocstringParser parser) -> YARD::Tags::Directive
  # Marks a class/module/method as abstract with optional
  # implementor information.
  #
  # @example
  #   # @abstract Subclass and override {#run} to implement
  #   #   a custom Threadable class.
  #   class Runnable
  #     def run; raise NotImplementedError end
  #   end
  # @!method abstract_tag
  # @!visibility private
  # @yard.tag abstract [] Abstract
  private def abstract_tag: (untyped text) -> untyped
  # Declares the API that the object belongs to. Does not display in
  # output, but useful for performing queries (+yardoc --query+). Any text is
  # allowable in this tag, and there are no predefined values.
  #
  # @!macro yard.tag.transitive
  # @note The special name +@api private+ does display a notice in
  #   documentation if it is listed, letting users know that the
  #   method is not to be used by external components.
  # @example
  #   class Post
  #     # @api private
  #     def reset_table!; table.flush end
  #   end
  # @!method api_tag
  # @!visibility private
  # @yard.tag api [] API Visibility
  private def api_tag: (untyped text) -> untyped
  # Declares a readwrite attribute on a Struct or class.
  #
  # @note This attribute is only applicable on class docstrings
  # @deprecated Use the more powerful {tag:!attribute} directive instead.
  # @example
  #   # @attr [String] name the name of the structure
  #   # @attr [Fixnum] size the size of the structure
  #   class MyStruct < Struct; end
  # @!method attr_tag
  # @!visibility private
  # @yard.tag attr [with_types_and_name] Attribute
  private def attr_tag: (untyped text) -> untyped
  # Declares a readonly attribute on a Struct or class.
  #
  # @note This attribute is only applicable on class docstrings
  # @deprecated Use the more powerful {tag:!attribute} directive instead.
  # @example
  #   # @attr_reader [String] name the name of the structure
  #   # @attr_reader [Fixnum] size the size of the structure
  #   class MyStruct < Struct; end
  # @!method attr_reader_tag
  # @!visibility private
  # @yard.tag attr_reader [with_types_and_name] Attribute Getter
  private def attr_reader_tag: (untyped text) -> untyped
  # Declares a writeonly attribute on a Struct or class.
  #
  # @note This attribute is only applicable on class docstrings
  # @deprecated Use the more powerful {tag:!attribute} directive instead.
  # @example
  #   # @attr_reader [String] name the name of the structure
  #   # @attr_reader [Fixnum] size the size of the structure
  #   class MyStruct < Struct; end
  # @!method attr_writer_tag
  # @!visibility private
  # @yard.tag attr_writer [with_types_and_name] Attribute Setter
  private def attr_writer_tag: (untyped text) -> untyped
  # List the author or authors of a class, module, or method.
  #
  # @example
  #   # @author Foo Bar <foo@bar.com>
  #   class MyClass; end
  # @!method author_tag
  # @!visibility private
  # @yard.tag author [] Author
  private def author_tag: (untyped text) -> untyped
  # Marks a method/class as deprecated with an optional description.
  # The description should be used to inform users of the recommended
  # migration path, and/or any useful information about why the object
  # was marked as deprecated.
  #
  # @example Deprecate a method with a replacement API
  #   # @deprecated Use {#bar} instead.
  #   def foo; end
  # @example Deprecate a method with no replacement
  #   class Thread
  #     # @deprecated Exiting a thread in this way is not reliable and
  #     #   can cause a program crash.
  #     def kill; end
  #   end
  # @!method deprecated_tag
  # @!visibility private
  # @yard.tag deprecated [] Deprecated
  private def deprecated_tag: (untyped text) -> untyped
  # Show an example snippet of code for an object. The first line
  # is an optional title.
  #
  # @example
  #   # @example Reverse a String
  #   #   "mystring".reverse #=> "gnirtsym"
  #   def reverse; end
  # @yard.signature Optional title
  #   Code block
  # @!method example_tag
  # @!visibility private
  # @yard.tag example [with_title_and_text] Example
  private def example_tag: (untyped text) -> untyped
  # Adds an emphasized note at the top of the docstring for the object
  #
  # @example
  #   # @note This method should only be used in outer space.
  #   def eject; end
  # @see tag:todo
  # @!method note_tag
  # @!visibility private
  # @yard.tag note [] Note
  private def note_tag: (untyped text) -> untyped
  # Describe an options hash in a method. The tag takes the
  # name of the options parameter first, followed by optional types,
  # the option key name, a default value for the key and a
  # description of the option. The default value should be placed within
  # parentheses and is optional (can be omitted).
  #
  # Note that a +@param+ tag need not be defined for the options
  # hash itself, though it is useful to do so for completeness.
  #
  # @note For keyword parameters, use +@param+, not +@option+.
  #
  # @example
  #   # @param [Hash] opts the options to create a message with.
  #   # @option opts [String] :subject The subject
  #   # @option opts [String] :from ('nobody') From address
  #   # @option opts [String] :to Recipient email
  #   # @option opts [String] :body ('') The email's body
  #   def send_email(opts = {}) end
  # @yard.signature name [Types] option_key (default_value) description
  # @!method option_tag
  # @!visibility private
  # @yard.tag option [with_options] Options Hash
  private def option_tag: (untyped text) -> untyped
  # Describe that your method can be used in various
  # contexts with various parameters or return types. The first
  # line should declare the new method signature, and the following
  # indented tag data will be a new documentation string with its
  # own tags adding metadata for such an overload.
  #
  # @example
  #   # @overload set(key, value)
  #   #   Sets a value on key
  #   #   @param key [Symbol] describe key param
  #   #   @param value [Object] describe value param
  #   # @overload set(value)
  #   #   Sets a value on the default key +:foo+
  #   #   @param value [Object] describe value param
  #   def set(*args) end
  # @yard.signature method_signature(parameters)
  #   Indented docstring for overload method
  # @!method overload_tag
  # @!visibility private
  # @yard.tag overload [OverloadTag] Overloads
  private def overload_tag: (untyped text) -> untyped
  # Documents a single method parameter (either regular or keyword) with a given name, type
  # and optional description.
  #
  # @example
  #   # @param url [String] the URL of the page to download
  #   # @param directory [String] the name of the directory to save to
  #   def load_page(url, directory: 'pages') end
  # @!method param_tag
  # @!visibility private
  # @yard.tag param [with_types_and_name] Parameters
  private def param_tag: (untyped text) -> untyped
  # Declares that the _logical_ visibility of an object is private.
  # In other words, it specifies that this method should be marked
  # private but cannot due to Ruby's visibility restrictions. This
  # exists for classes, modules and constants that do not obey Ruby's
  # visibility rules. For instance, an inner class might be considered
  # "private", though Ruby would make no such distinction.
  #
  # This tag is meant to be used in conjunction with the +--no-private+
  # command-line option, and is required to actually remove these objects
  # from documentation output. See {file:README.md} for more information on
  # switches.
  #
  # If you simply want to set the API visibility of a method, you should
  # look at the {tag:api} tag instead.
  #
  # @note This method is not recommended for hiding undocumented or
  #   "unimportant" methods. This tag should only be used to mark objects
  #   private when Ruby visibility rules cannot do so. In Ruby 1.9.3, you
  #   can use +private_constant+ to declare constants (like classes or
  #   modules) as private, and should be used instead of +@private+.
  # @macro yard.tag.transitive
  # @example
  #   # @private
  #   class InteralImplementation; end
  # @see tag:api
  # @yard.signature
  # @!method private_tag
  # @!visibility private
  # @yard.tag private [] Private
  private def private_tag: (untyped text) -> untyped
  # Describes that a method may raise a given exception, with
  # an optional description of what it may mean.
  #
  # @example
  #   # @raise [AccountBalanceError] if the account does not have
  #   #   sufficient funds to perform the transaction
  #   def withdraw(amount) end
  # @!method raise_tag
  # @!visibility private
  # @yard.tag raise [with_types] Raises
  private def raise_tag: (untyped text) -> untyped
  # Describes the return value (and type or types) of a method.
  # You can list multiple return tags for a method in the case
  # where a method has distinct return cases. In this case, each
  # case should begin with "if ...".
  #
  # @example A regular return value
  #   # @return [Fixnum] the size of the file
  #   def size; @file.size end
  # @example A method returns an Array or a single object
  #   # @return [String] if a single object was returned
  #   #   from the database.
  #   # @return [Array<String>] if multiple objects were
  #   #   returned.
  #   def find(query) end
  # @!method return_tag
  # @!visibility private
  # @yard.tag return [with_types] Returns
  private def return_tag: (untyped text) -> untyped
  # "See Also" references for an object. Accepts URLs or
  # other code objects with an optional description at the end.
  # Note that the URL or object will be automatically linked by
  # YARD and does not need to be formatted with markup.
  #
  # @example
  #   # Synchronizes system time using NTP.
  #   # @see http://ntp.org/documentation.html NTP Documentation
  #   # @see NTPHelperMethods
  #   class NTPUpdater; end
  # @!method see_tag
  # @!visibility private
  # @yard.tag see [with_name] See Also
  private def see_tag: (untyped text) -> untyped
  # Lists the version that the object was first added.
  #
  # @!macro yard.tag.transitive
  # @example
  #   # @since 1.2.4
  #   def clear_routes; end
  # @!method since_tag
  # @!visibility private
  # @yard.tag since [] Since
  private def since_tag: (untyped text) -> untyped
  # Marks a TODO note in the object being documented.
  # For reference, objects with TODO items can be enumerated
  # from the command line with a simple command:
  #
  #   !!!sh
  #   mocker$ yard list --query '@todo'
  #   lib/mocker/mocker.rb:15: Mocker
  #   lib/mocker/report/html.rb:5: Mocker::Report::Html
  #
  # YARD can also be used to enumerate the TODO items from
  # a short script:
  #
  #   !!!ruby
  #   require 'yard'
  #   YARD::Registry.load!.all.each do |o|
  #     puts o.tag(:todo).text if o.tag(:todo)
  #   end
  #
  # @example
  #   # @todo Add support for Jabberwocky service.
  #   #   There is an open source Jabberwocky library available
  #   #   at http://jbrwcky.org that can be easily integrated.
  #   class Wonderlander; end
  # @see tag:note
  # @!method todo_tag
  # @!visibility private
  # @yard.tag todo [] Todo Item
  private def todo_tag: (untyped text) -> untyped
  # Lists the version of a class, module or method. This is
  # similar to a library version, but at finer granularity.
  # In some cases, version of specific modules, classes, methods
  # or generalized components might change independently between
  # releases. A version tag is used to infer the API compatibility
  # of a specific object.
  #
  # @example
  #   # The public REST API for http://jbrwcky.org
  #   # @version 2.0
  #   class JabberwockyAPI; end
  # @!method version_tag
  # @!visibility private
  # @yard.tag version [] Version
  private def version_tag: (untyped text) -> untyped
  # Describes what a method might yield to a given block.
  # The types specifier list should not list types, but names
  # of the parameters yielded to the block. If you define
  # parameters with +@yieldparam+, you do not need to define
  # the parameters in the type specification of +@yield+ as
  # well.
  #
  # @example
  #   # For a block {|a,b,c| ... }
  #   # @yield [a, b, c] Gives 3 random numbers to the block
  #   def provide3values(&block) yield(42, 42, 42) end
  # @see tag:yieldparam
  # @see tag:yieldreturn
  # @yard.signature [parameters] description
  # @!method yield_tag
  # @!visibility private
  # @yard.tag yield [with_types] Yields
  private def yield_tag: (untyped text) -> untyped
  # Defines a parameter yielded by a block. If you define the
  # parameters with +@yieldparam+, you do not need to define
  # them via +@yield+ as well.
  #
  # @example
  #   # @yieldparam [String] name the name that is yielded
  #   def with_name(name) yield(name) end
  # @!method yieldparam_tag
  # @!visibility private
  # @yard.tag yieldparam [with_types_and_name] Yield Parameters
  private def yieldparam_tag: (untyped text) -> untyped
  # Documents the value and type that the block is expected
  # to return to the method.
  #
  # @example
  #   # @yieldreturn [Fixnum] the number to add 5 to.
  #   def add5_block(&block) 5 + yield end
  # @see tag:return
  # @!method yieldreturn_tag
  # @!visibility private
  # @yard.tag yieldreturn [with_types] Yield Returns
  private def yieldreturn_tag: (untyped text) -> untyped
  # @yard.signature [r | w | rw] attribute_name
  #   Indented attribute docstring
  # @!method attribute_directive
  # @!visibility private
  # @yard.directive attribute [with_types_and_title] AttributeDirective
  private def attribute_directive: (untyped tag, untyped parser) -> untyped
  # @yard.signature
  # @!method endgroup_directive
  # @!visibility private
  # @yard.directive endgroup [EndGroupDirective] EndGroupDirective
  private def endgroup_directive: (untyped tag, untyped parser) -> untyped
  #
  # @!method group_directive
  # @!visibility private
  # @yard.directive group [GroupDirective] GroupDirective
  private def group_directive: (untyped tag, untyped parser) -> untyped
  # @yard.signature [attach | new] optional_name
  #   Optional macro expansion data
  # @!method macro_directive
  # @!visibility private
  # @yard.directive macro [with_types_and_title] MacroDirective
  private def macro_directive: (untyped tag, untyped parser) -> untyped
  # @yard.signature method_signature(parameters)
  #   Indented method docstring
  # @!method method_directive
  # @!visibility private
  # @yard.directive method [with_title_and_text] MethodDirective
  private def method_directive: (untyped tag, untyped parser) -> untyped
  # @yard.signature [language] code
  # @!method parse_directive
  # @!visibility private
  # @yard.directive parse [with_types] ParseDirective
  private def parse_directive: (untyped tag, untyped parser) -> untyped
  # Sets the scope of a DSL method. Only applicable to DSL method
  # calls. Acceptable values are 'class' or 'instance'
  # @yard.signature class | instance
  # @!method scope_directive
  # @!visibility private
  # @yard.directive scope [ScopeDirective] ScopeDirective
  private def scope_directive: (untyped tag, untyped parser) -> untyped
  # Sets the visibility of a DSL method. Only applicable to
  # DSL method calls. Acceptable values are public, protected, or private.
  # @yard.signature public | protected | private
  # @!method visibility_directive
  # @!visibility private
  # @yard.directive visibility [VisibilityDirective] VisibilityDirective
  private def visibility_directive: (untyped tag, untyped parser) -> untyped
end
