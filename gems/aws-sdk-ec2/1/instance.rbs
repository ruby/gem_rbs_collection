# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the generator README.md for more information:
# https://github.com/ruby/gem_rbs_collection/blob/main/generators/aws-sdk-rbs-generator/README.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module EC2
    class Instance
      # identifiers

      def initialize: (id: String, ?client: Client, **untyped) -> void
      def id: () -> String

      # data_attribute

      def ami_launch_index: () -> Types::integer
      def image_id: () -> Types::string
      def instance_type: () -> Types::instance_type
      def kernel_id: () -> Types::string
      def key_name: () -> Types::string
      def launch_time: () -> Types::date_time
      def monitoring: () -> Types::Monitoring
      def placement: () -> Types::Placement
      def platform: () -> Types::platform_values
      def private_dns_name: () -> Types::string
      def private_ip_address: () -> Types::string
      def product_codes: () -> Types::product_code_list
      def public_dns_name: () -> Types::string
      def public_ip_address: () -> Types::string
      def ramdisk_id: () -> Types::string
      def state: () -> Types::InstanceState
      def state_transition_reason: () -> Types::string
      def subnet_id: () -> Types::string
      def vpc_id: () -> Types::string
      def architecture: () -> Types::architecture_values
      def block_device_mappings: () -> Types::instance_block_device_mapping_list
      def client_token: () -> Types::string
      def ebs_optimized: () -> Types::boolean
      def ena_support: () -> Types::boolean
      def hypervisor: () -> Types::hypervisor_type
      def iam_instance_profile: () -> Types::IamInstanceProfile
      def instance_lifecycle: () -> Types::instance_lifecycle_type
      def elastic_gpu_associations: () -> Types::elastic_gpu_association_list
      def elastic_inference_accelerator_associations: () -> Types::elastic_inference_accelerator_association_list
      def outpost_arn: () -> Types::string
      def root_device_name: () -> Types::string
      def root_device_type: () -> Types::device_type
      def security_groups: () -> Types::group_identifier_list_output
      def source_dest_check: () -> Types::boolean
      def spot_instance_request_id: () -> Types::string
      def sriov_net_support: () -> Types::string
      def state_reason: () -> Types::StateReason
      def tags: () -> Types::tag_list_output
      def virtualization_type: () -> Types::virtualization_type
      def cpu_options: () -> Types::CpuOptions
      def capacity_reservation_id: () -> Types::string
      def capacity_reservation_specification: () -> Types::CapacityReservationSpecificationResponse
      def hibernation_options: () -> Types::HibernationOptions
      def licenses: () -> Types::license_list
      def metadata_options: () -> Types::InstanceMetadataOptionsResponse
      def enclave_options: () -> Types::EnclaveOptions
      def boot_mode: () -> Types::boot_mode_values
      def platform_details: () -> Types::string
      def usage_operation: () -> Types::string
      def usage_operation_update_time: () -> Types::millisecond_date_time
      def private_dns_name_options: () -> Types::PrivateDnsNameOptionsResponse
      def ipv_6_address: () -> Types::string
      def tpm_support: () -> Types::string
      def maintenance_options: () -> Types::InstanceMaintenanceOptions
      def current_instance_boot_mode: () -> Types::instance_boot_mode_values

      # client_method

      def client: () -> Client

      # load_method

      def load: () -> self
      alias reload load

      # data_method

      def data: () -> Types::Instance

      def data_loaded?: () -> bool

      # waiters

      def exists?: (?Aws::Waiters::waiter_options) -> bool
      def wait_until_exists: (?Aws::Waiters::waiter_options) -> self
      def wait_until_running: (?Aws::Waiters::waiter_options) -> self
      def wait_until_stopped: (?Aws::Waiters::waiter_options) -> self
      def wait_until_terminated: (?Aws::Waiters::waiter_options) -> self

      # actions

      def attach_classic_link_vpc: (?dry_run: Types::boolean, groups: Types::group_id_string_list, vpc_id: Types::vpc_id) -> Types::AttachClassicLinkVpcResult
      def attach_volume: (device: Types::string, volume_id: Types::volume_id, ?dry_run: Types::boolean) -> Types::VolumeAttachment
      def console_output: (?dry_run: Types::boolean, ?latest: Types::boolean) -> Types::GetConsoleOutputResult
      def create_image: (?block_device_mappings: Types::block_device_mapping_request_list_input, ?description: Types::string, ?dry_run: Types::boolean, name: Types::string, ?no_reboot: Types::boolean, ?tag_specifications: Types::tag_specification_list_input) -> Image
      def create_tags: (?dry_run: Types::boolean, tags: Types::tag_list_input) -> Tag::Collection
      def delete_tags: (?dry_run: Types::boolean, ?tags: Types::tag_list_input) -> Tag::Collection
      def describe_attribute: (attribute: Types::instance_attribute_name, ?dry_run: Types::boolean) -> Types::InstanceAttribute
      def detach_classic_link_vpc: (?dry_run: Types::boolean, vpc_id: Types::vpc_id) -> Types::DetachClassicLinkVpcResult
      def detach_volume: (?device: Types::string, ?force: Types::boolean, volume_id: Types::volume_id_with_resolver, ?dry_run: Types::boolean) -> Types::VolumeAttachment
      def modify_attribute: (?source_dest_check: Types::attribute_boolean_value, ?attribute: Types::instance_attribute_name, ?block_device_mappings: Types::instance_block_device_mapping_specification_list, ?disable_api_termination: Types::attribute_boolean_value, ?dry_run: Types::boolean, ?ebs_optimized: Types::attribute_boolean_value, ?ena_support: Types::attribute_boolean_value, ?groups: Types::group_id_string_list, ?instance_initiated_shutdown_behavior: Types::attribute_value, ?instance_type: Types::attribute_value, ?kernel: Types::attribute_value, ?ramdisk: Types::attribute_value, ?sriov_net_support: Types::attribute_value, ?user_data: Types::blob_attribute_value, ?value: Types::string, ?disable_api_stop: Types::attribute_boolean_value) -> EmptyStructure
      def monitor: (?dry_run: Types::boolean) -> Types::MonitorInstancesResult
      def password_data: (?dry_run: Types::boolean) -> Types::GetPasswordDataResult
      def reboot: (?dry_run: Types::boolean) -> EmptyStructure
      def report_status: (?description: Types::string, ?dry_run: Types::boolean, ?end_time: Types::date_time, reason_codes: Types::reason_codes_list, ?start_time: Types::date_time, status: Types::report_status_type) -> EmptyStructure
      def reset_attribute: (attribute: Types::instance_attribute_name, ?dry_run: Types::boolean) -> EmptyStructure
      def reset_kernel: (?dry_run: Types::boolean) -> EmptyStructure
      def reset_ramdisk: (?dry_run: Types::boolean) -> EmptyStructure
      def reset_source_dest_check: (?dry_run: Types::boolean) -> EmptyStructure
      def start: (?additional_info: Types::string, ?dry_run: Types::boolean) -> Types::StartInstancesResult
      def stop: (?hibernate: Types::boolean, ?dry_run: Types::boolean, ?force: Types::boolean) -> Types::StopInstancesResult
      def terminate: (?dry_run: Types::boolean) -> Types::TerminateInstancesResult
      def unmonitor: (?dry_run: Types::boolean) -> Types::UnmonitorInstancesResult

      # associations

      def classic_address: () -> ClassicAddress?
      def image: () -> Image?
      def key_pair: () -> KeyPairInfo?
      def network_interfaces: () -> NetworkInterface::Collection
      def placement_group: () -> PlacementGroup?
      def subnet: () -> Subnet?
      def volumes: (?filters: Types::filter_list, ?volume_ids: Types::volume_id_string_list, ?dry_run: Types::boolean, ?max_results: Types::integer, ?next_token: Types::string) -> Volume::Collection
      def vpc: () -> Vpc?
      def vpc_addresses: (?filters: Types::filter_list, ?public_ips: Types::public_ip_string_list, ?allocation_ids: Types::allocation_id_list, ?dry_run: Types::boolean) -> VpcAddress::Collection

      # batch_actions

      class Collection < ::Aws::Resources::Collection[Instance]
        def batch_create_tags: (?dry_run: Types::boolean, tags: Types::tag_list_input) -> void
        def batch_delete_tags!: (?dry_run: Types::boolean, ?tags: Types::tag_list_input) -> void
        def batch_monitor: (?dry_run: Types::boolean) -> void
        def batch_reboot: (?dry_run: Types::boolean) -> void
        def batch_start: (?additional_info: Types::string, ?dry_run: Types::boolean) -> void
        def batch_stop: (?hibernate: Types::boolean, ?dry_run: Types::boolean, ?force: Types::boolean) -> void
        def batch_terminate!: (?dry_run: Types::boolean) -> void
        def batch_unmonitor: (?dry_run: Types::boolean) -> void
      end
    end
  end
end
