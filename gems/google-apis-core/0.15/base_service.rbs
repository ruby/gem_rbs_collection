module Google
  module Apis
    module Core
      # # Helper class for enumerating over a result set requiring multiple fetches
      # class PagedResults
      #   @service: untyped

      #   @block: untyped

      #   @max: untyped

      #   @items_field: untyped

      #   @response_page_token_field: untyped

      #   @result_cache: untyped

      #   @fetch_proc: untyped

      #   include Enumerable

      #   attr_reader last_result: untyped

      #   # @param [BaseService] service
      #   #   Current service instance
      #   # @param [Fixnum] max
      #   #   Maximum number of items to iterate over. Nil if no limit
      #   # @param [Boolean] cache
      #   #  True (default) if results should be cached so multiple iterations can be used.
      #   # @param [Symbol] items
      #   #   Name of the field in the result containing the items. Defaults to :items
      #   def initialize: (untyped service, ?max: untyped?, ?items: ::Symbol, ?cache: bool, ?response_page_token: ::Symbol) { (?) -> untyped } -> void

      #   # Iterates over result set, fetching additional pages as needed
      #   def each: () { (untyped, untyped) -> untyped } -> untyped
      # end

      # Base service for all APIs. Not to be used directly.
      #
      class BaseService
        @root_url: untyped

        @universe_domain: untyped

        @root_url_template: untyped

        @client: untyped

        #
        # A substitution string for the universe domain in an endpoint template
        # @return [String]
        #
        ENDPOINT_SUBSTITUTION: "$UNIVERSE_DOMAIN$"

        include Logging

        # Universe domain
        # @return [String]
        attr_reader universe_domain: untyped

        # Set the universe domain.
        # If the root URL was set with a universe domain substitution, it is
        # updated to reflect the new universe domain.
        #
        # @param new_ud [String,nil] The new universe domain, or nil to use the Google Default Universe
        def universe_domain=: (untyped new_ud) -> untyped

        # Root URL (host/port) for the API
        # @return [Addressable::URI, String]
        attr_reader root_url: untyped

        # Set the root URL.
        # If the given url includes a universe domain substitution, it is
        # resolved in the current universe domain
        #
        # @param url_or_template [Addressable::URI, String] The URL, which can include a universe domain substitution
        def root_url=: (untyped url_or_template) -> untyped

        # Additional path prefix for all API methods
        # @return [Addressable::URI]
        attr_accessor base_path: untyped

        # Alternate path prefix for media uploads
        # @return [Addressable::URI]
        attr_accessor upload_path: untyped

        # Alternate path prefix for all batch methods
        # @return [Addressable::URI]
        attr_accessor batch_path: untyped

        # HTTP client
        # @return [HTTPClient]
        attr_accessor client: untyped

        # General settings
        # @return [Google::Apis::ClientOptions]
        attr_accessor client_options: untyped

        # Default options for all requests
        # @return [Google::Apis::RequestOptions]
        attr_accessor request_options: untyped

        # Client library name.
        # @return [String]
        attr_accessor client_name: untyped

        # Client library version.
        # @return [String]
        attr_accessor client_version: untyped

        # @param [String,Addressable::URI] root_url
        #   Root URL for the API
        # @param [String,Addressable::URI] base_path
        #   Additional path prefix for all API methods
        # @api private
        def initialize: (untyped root_url, untyped base_path, ?client_name: untyped?, ?client_version: untyped?, ?universe_domain: untyped?) -> void

        # @!attribute [rw] authorization
        # @return [Signet::OAuth2::Client]
        #  OAuth2 credentials
        def authorization=: (untyped authorization) -> untyped

        def authorization: () -> untyped

        # Perform a batch request. Calls made within the block are sent in a single network
        # request to the server.
        #
        # @example
        #   service.batch do |s|
        #     s.get_item(id1) do |res, err|
        #       # process response for 1st call
        #     end
        #     # ...
        #     s.get_item(idN) do |res, err|
        #       # process response for Nth call
        #     end
        #   end
        #
        # @param [Hash, Google::Apis::RequestOptions] options
        #  Request-specific options
        # @yield [self]
        # @return [void]
        def batch: (?untyped? options) { (untyped) -> untyped } -> untyped

        # Perform a batch upload request. Calls made within the block are sent in a single network
        # request to the server. Batch uploads are useful for uploading multiple small files. For larger
        # files, use single requests which use a resumable upload protocol.
        #
        # @example
        #   service.batch do |s|
        #     s.insert_item(upload_source: 'file1.txt') do |res, err|
        #       # process response for 1st call
        #     end
        #     # ...
        #     s.insert_item(upload_source: 'fileN.txt') do |res, err|
        #       # process response for Nth call
        #     end
        #   end
        #
        # @param [Hash, Google::Apis::RequestOptions] options
        #  Request-specific options
        # @yield [self]
        # @return [void]
        def batch_upload: (?untyped? options) { (untyped) -> untyped } -> untyped

        # Get the current HTTP client
        # @return [HTTPClient]
        def client: ...

        # Simple escape hatch for making API requests directly to a given
        # URL. This is not intended to be used as a generic HTTP client
        # and should be used only in cases where no service method exists
        # (e.g. fetching an export link for a Google Drive file.)
        #
        # @param [Symbol] method
        #   HTTP method as symbol (e.g. :get, :post, :put, ...)
        # @param [String] url
        #   URL to call
        # @param [Hash<String,String>] params
        #   Optional hash of query parameters
        # @param [#read] body
        #   Optional body for POST/PUT
        # @param [IO, String] download_dest
        #   IO stream or filename to receive content download
        # @param [Google::Apis::RequestOptions] options
        #   Request-specific options
        #
        # @yield [result, err] Result & error if block supplied
        # @yieldparam result [String] HTTP response body
        # @yieldparam err [StandardError] error object if request failed
        #
        # @return [String] HTTP response body
        def http: (untyped method, untyped url, ?params: untyped?, ?body: untyped?, ?download_dest: untyped?, ?options: untyped?) { (?) -> untyped } -> untyped

        # Executes a given query with paging, automatically retrieving
        # additional pages as necessary. Requires a block that returns the
        # result set of a page. The current page token is supplied as an argument
        # to the block.
        #
        # Note: The returned enumerable also contains a `last_result` field
        # containing the full result of the last query executed.
        #
        # @param [Fixnum] max
        #   Maximum number of items to iterate over. Defaults to nil -- no upper bound.
        # @param [Symbol] items
        #   Name of the field in the result containing the items. Defaults to :items
        # @param [Boolean] cache
        #  True (default) if results should be cached so multiple iterations can be used.
        # @return [Enumerable]
        # @yield [token, service]
        #   Current page token & service instance
        # @yieldparam [String] token
        #   Current page token to be used in the query
        # @yieldparam [service]
        #   Current service instance
        # @since 0.9.4
        #
        # @example Retrieve all files,
        #   file_list = service.fetch_all { |token, s| s.list_files(page_token: token) }
        #   file_list.each { |f| ... }
        def fetch_all: (?max: untyped?, ?items: ::Symbol, ?cache: bool, ?response_page_token: ::Symbol) { (?) -> untyped } -> untyped

        # Verify that the universe domain setting matches the universe domain
        # in the credentials, if present.
        #
        # @raise [Google::Apis::UniverseDomainError] if there is a mismatch
        def verify_universe_domain!: () -> true

        # Create a new upload command.
        #
        # @param [symbol] method
        #   HTTP method for uploading (typically :put or :post)
        # @param [String] path
        #  Additional path to upload endpoint, appended to API base path
        # @param [Hash, Google::Apis::RequestOptions] options
        #  Request-specific options
        # @return [Google::Apis::Core::UploadCommand]
        def make_upload_command: (untyped method, untyped path, untyped options) -> untyped

        # Create a new storage upload command.
        # This is specifically for storage because we are moving to a new upload protocol.
        # Ref: https://cloud.google.com/storage/docs/performing-resumable-uploads
        #
        # @param [Symbol] method
        #  HTTP method for uploading. The initial request to initiate a resumable session
        #  is :post and the subsequent chunks uploaded to the session are :put
        # @param [String] path
        #  Additional path to upload endpoint, appended to API base path
        # @param [Hash, Google::Apis::RequestOptions] options
        #  Request-specific options
        # @return [Google::Apis::Core::StorageUploadCommand]
        def make_storage_upload_command: (untyped method, untyped path, untyped options) -> untyped

        # Create a new download command.
        #
        # @param [symbol] method
        #   HTTP method for uploading (typically :get)
        # @param [String] path
        #  Additional path to download endpoint, appended to API base path
        # @param [Hash, Google::Apis::RequestOptions] options
        #  Request-specific options
        # @return [Google::Apis::Core::DownloadCommand]
        def make_download_command: (untyped method, untyped path, untyped options) -> untyped

        # Create a new storage download command. This is specifically for storage because
        # we want to return response header too in the response.
        #
        # @param [symbol] method
        #   HTTP method for uploading (typically :get)
        # @param [String] path
        #  Additional path to download endpoint, appended to API base path
        # @param [Hash, Google::Apis::RequestOptions] options
        #  Request-specific options
        # @return [Google::Apis::Core::StorageDownloadCommand]
        def make_storage_download_command: (untyped method, untyped path, untyped options) -> untyped

        # Create a new command.
        #
        # @param [symbol] method
        #   HTTP method (:get, :post, :delete, etc...)
        # @param [String] path
        #  Additional path, appended to API base path
        # @param [Hash, Google::Apis::RequestOptions] options
        #  Request-specific options
        # @return [Google::Apis::Core::DownloadCommand]
        def make_simple_command: (untyped method, untyped path, untyped options) -> untyped

        # Execute the request. If a batch is in progress, the request is added to the batch instead.
        #
        # @param [Google::Apis::Core::HttpCommand] command
        #   Command to execute
        # @return [Object] response object if command executed and no callback supplied
        # @yield [result, err] Result & error if block supplied
        # @raise [Google::Apis::ServerError] An error occurred on the server and the request can be retried
        # @raise [Google::Apis::ClientError] The request is invalid and should not be retried without modification
        # @raise [Google::Apis::AuthorizationError] Authorization is required
        def execute_or_queue_command: (untyped command) { (?) -> untyped } -> untyped

        # Update commands with service-specific options. To be implemented by subclasses
        # @param [Google::Apis::Core::HttpCommand] _command
        def apply_command_defaults: (untyped _command) -> nil

        private

        # Get the current batch context
        #
        # @return [Google:Apis::Core::BatchRequest]
        def current_batch: () -> untyped

        # Check if a batch is in progress
        # @return [Boolean]
        def batch?: () -> untyped

        # Start a new thread-local batch context
        # @param [Google::Apis::Core::BatchCommand] cmd
        def start_batch: (untyped cmd) -> untyped

        # Clear thread-local batch context
        def end_batch: () -> untyped

        # Create a new HTTP client
        # @return [HTTPClient]
        def new_client: () -> untyped

        # Build the user agent header
        # @return [String]
        def user_agent: () -> untyped
      end
    end
  end
end
