module RestClient
  type callback = ^(Response, Request, Net::HTTPResponse, callback) -> void

  class Request
    def self.execute: (Hash[untyped, untyped] args) ? { (Response, Request, Net::HTTPResponse, callback) -> void } -> untyped
  end

  class Response < String
    include AbstractResponse

    def body: () -> String
    def to_s: () -> String
    def to_str: () -> String
  end

  module AbstractResponse
    attr_reader net_http_res: Net::HTTPResponse
    attr_reader request: RestClient::Request
    attr_reader start_time: Time
    attr_reader end_time: Time

    def code: () -> Integer
    def history: () -> untyped
    def headers: () -> untyped
    def raw_heders: () -> Hash[untyped, untyped]
    def cookies: () -> Hash[untyped, untyped]
    def cookie_jar: () -> untyped
    def return!: () -> untyped
    def description: () -> String
  end

  class Resource
    attr_reader url: String
    attr_reader options: Hash[untyped, untyped]?
    attr_reader block: Proc

    def initialize: (String url, ?Hash[untyped, untyped] options, ?String backwards_compatability) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> void

    def get: (?Hash[untyped, untyped] additional_headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response

    def head: (?Hash[untyped, untyped] additional_headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response

    def post: (untyped payload, ?Hash[untyped, untyped] additional_headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response

    def put: (untyped payload, ?Hash[untyped, untyped] additional_headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response

    def patch: (untyped payload, ?Hash[untyped, untyped] additional_headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response

    def delete: (?Hash[untyped, untyped] additional_headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response

    def to_s: -> String

    def user: -> untyped

    def password: -> untyped

    def headers: -> Hash[untyped, untyped]

    def read_timeout: -> Integer

    def open_timeout: -> Integer

    def log: -> untyped

    def []: (String suburl) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> self

    def concat_urls: (untyped url, untyped suburl) -> String
  end

  def self.get: (String url, ?Hash[untyped, untyped] headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response
  def self.post: (String url, untyped payload, ?Hash[untyped, untyped] headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response
  def self.patch: (String url, untyped payload, ?Hash[untyped, untyped] headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response
  def self.put: (String url, untyped payload, ?Hash[untyped, untyped] headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response
  def self.delete: (String url, ?Hash[untyped, untyped] headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response
  def self.head: (String url, ?Hash[untyped, untyped] headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response
  def self.options: (String url, ?Hash[untyped, untyped] headers) ?{ (Response, Request, Net::HTTPResponse, callback) -> void } -> Response
end
