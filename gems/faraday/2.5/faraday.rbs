module Faraday
  VERSION: ::String

  attr_reader self.default_adapter: Symbol

  def self.new: (?untyped url, ?untyped options) ?{ (?untyped) -> void } -> Faraday::Connection

  class Connection
    attr_reader headers: Hash[String, String]

    def get: (?String | URI url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def head: (?String | URI url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def delete: (?String | URI url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def trace: (?String | URI url, ?untyped params, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response

    def post: (?String | URI url, ?untyped body, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def put: (?String | URI url, ?untyped body, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
    def patch: (?String | URI url, ?untyped body, ?untyped headers) ?{ (Faraday::Request) -> void } -> Faraday::Response
  end

  class Response
    def status: () -> Integer
    def headers: () -> untyped
    def body: () -> String
    def success?: () -> bool
  end

  class Request
    def http_method=: (untyped) -> void
    def path=: (String | URI) -> void
    def params=: (untyped) -> void
    def headers=: (untyped) -> void
    def body=: (untyped) -> void
    def options=: (untyped) -> void
    def url: (String | URI path, ?::Hash[untyped, untyped] params) -> void
    def []: (untyped key) -> void
    def []=: (untyped key, untyped value) -> void
  end

  module FlatParamsEncoder
    extend Forwardable

    def self.encode: (Hash[_ToS, _ToS | Array[_ToS]] | nil params) -> (nil | String)
    def self.decode: (String | nil query) -> (nil | Hash[String, true | String | Array[String]])

    attr_accessor self.sort_params: boolish
  end
end
