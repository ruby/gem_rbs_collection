module ActiveJob
  class Base
    extend ActiveJob::Callbacks::ClassMethods
    extend ActiveJob::Core::ClassMethods
    extend ActiveJob::Enqueuing::ClassMethods
    extend ActiveJob::Exceptions::ClassMethods
    extend ActiveJob::Execution::ClassMethods
    extend ActiveJob::QueueAdapter::ClassMethods
    extend ActiveJob::QueueName::ClassMethods
    extend ActiveJob::QueuePriority::ClassMethods
    extend ActiveJob::Logging::ClassMethods
    include ActiveJob::Logging

    def self.queue_as: (*untyped) -> void | ...
    def self.queue_with_priority: (?untyped? priority) -> void | ...
    def self.before_perform: (*untyped filters) -> void | ...
    def self.after_perform: (*untyped filters) -> void | ...
    def self.around_perform: (*untyped filters) -> void | ...
    def self.before_enqueue: (*untyped filters) -> void | ...
    def self.after_enqueue: (*untyped filters) -> void | ...
    def self.around_enqueue: (*untyped filters) -> void | ...
    def self.retry_on: (*untyped) -> void | ...
    def self.discard_on: (*untyped) -> void | ...
  end
end

module ActiveJob
  module Logging
    # nodoc:
    extend ActiveSupport::Concern

    module ClassMethods
      def logger: () -> untyped
      def logger=: (untyped val) -> untyped
      def log_arguments: () -> bool
      def log_arguments=: (bool value) -> bool
      def log_arguments?: () -> bool
    end

    def logger: () -> untyped
    def logger=: (untyped val) -> untyped

    private

    def tag_logger: (*Array[String] tags) { () -> untyped } -> untyped

    def logger_tagged_by_active_job?: () -> bool
  end
end
