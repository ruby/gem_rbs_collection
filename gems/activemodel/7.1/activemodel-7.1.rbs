module ActiveModel
  module Access
    def slice: (*Symbol | String) -> ActiveSupport::HashWithIndifferentAccess[Symbol, untyped]

    def values_at: (*Symbol | String) -> Array[untyped]
  end
end

module ActiveModel
  module API
    extend ActiveSupport::Concern
    include ActiveModel::AttributeAssignment
    include ActiveModel::Validations
    extend ActiveModel::Validations::ClassMethods
    include ActiveModel::Conversion
    extend ActiveModel::Conversion::ClassMethods

    def persisted?: () -> bool
  end
end

module ActiveModel
  module Attributes
    include ActiveModel::AttributeRegistration
  end
end

module ActiveModel
  module AttributeRegistration
    module ClassMethods
      def attribute: (untyped name, ?untyped? type, ?default: untyped, **untyped options) -> untyped
      def attribute_types: () -> Hash[untyped, untyped]
    end
  end
end

module ActiveModel
  class Error
    CALLBACKS_OPTIONS: ::Array[:if | :unless | :on | :allow_nil | :allow_blank | :strict]

    MESSAGE_OPTIONS: ::Array[:message]

    attr_reader base: untyped

    attr_reader attribute: Symbol | String

    attr_reader type: Symbol | String

    attr_reader raw_type: (Symbol | String)?

    attr_reader options: Hash[Symbol, untyped]

    def initialize: (untyped base, Symbol | String attribute, ?(Symbol | String)? type, **untyped options) -> void

    def message: () -> String

    def details: () -> Hash[Symbol, untyped]

    alias detail details

    def full_message: () -> String

    def match?: (Symbol | String attribute, ?(Symbol | String)? type, **untyped options) -> bool

    def strict_match?: (Symbol | String attribute, (Symbol | String)? type, **untyped options) -> bool
  end
end

module ActiveModel
  class Errors
    # Delete messages for +key+. Returns the deleted messages.
    #
    #   person.errors[:name]        # => ["cannot be nil"]
    #   person.errors.delete(:name) # => ["cannot be nil"]
    #   person.errors[:name]        # => []
    def delete: (untyped key, ?untyped type, **untyped) -> untyped
  end
end

module ActiveModel
  module Model
    include ActiveModel::Access
  end
end
