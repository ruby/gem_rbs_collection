# Write the type definition here!
module Scanf
end

# Expect library adds the IO instance method #expect, which does similar act to
# tcl's expect extension.
#
# In order to use this method, you must require expect:
#
#     require 'expect'
#
# Please see #expect for usage.
# The IO class is the basis for all input and output in Ruby. An I/O stream may
# be *duplexed* (that is, bidirectional), and so may use more than one native
# operating system stream.
#
# Many of the examples in this section use the File class, the only standard
# subclass of IO. The two classes are closely associated.  Like the File class,
# the Socket library subclasses from IO (such as TCPSocket or UDPSocket).
#
# The Kernel#open method can create an IO (or File) object for these types of
# arguments:
#
# *   A plain string represents a filename suitable for the underlying operating
#     system.
#
# *   A string starting with `"|"` indicates a subprocess. The remainder of the
#     string following the `"|"` is invoked as a process with appropriate
#     input/output channels connected to it.
#
# *   A string equal to `"|-"` will create another Ruby instance as a
#     subprocess.
#
#
# The IO may be opened with different file modes (read-only, write-only) and
# encodings for proper conversion.  See IO.new for these options.  See
# Kernel#open for details of the various command formats described above.
#
# IO.popen, the Open3 library, or  Process#spawn may also be used to communicate
# with subprocesses through an IO.
#
# Ruby will convert pathnames between different operating system conventions if
# possible.  For instance, on a Windows system the filename
# `"/gumby/ruby/test.rb"` will be opened as `"\gumby\ruby\test.rb"`.  When
# specifying a Windows-style filename in a Ruby string, remember to escape the
# backslashes:
#
#     "C:\\gumby\\ruby\\test.rb"
#
# Our examples here will use the Unix-style forward slashes; File::ALT_SEPARATOR
# can be used to get the platform-specific separator character.
#
# The global constant ARGF (also accessible as `$<`) provides an IO-like stream
# which allows access to all files mentioned on the command line (or STDIN if no
# files are mentioned). ARGF#path and its alias ARGF#filename are provided to
# access the name of the file currently being read.
#
# ## io/console
#
# The io/console extension provides methods for interacting with the console.
# The console can be accessed from IO.console or the standard input/output/error
# IO objects.
#
# Requiring io/console adds the following methods:
#
# *   IO::console
# *   IO#raw
# *   IO#raw!
# *   IO#cooked
# *   IO#cooked!
# *   IO#getch
# *   IO#echo=
# *   IO#echo?
# *   IO#noecho
# *   IO#winsize
# *   IO#winsize=
# *   IO#iflush
# *   IO#ioflush
# *   IO#oflush
#
#
# Example:
#
#     require 'io/console'
#     rows, columns = $stdout.winsize
#     puts "Your screen is #{columns} wide and #{rows} tall"
class IO
  def scanf: (String str) ?{ (untyped) -> untyped } -> Array[untyped]
end

# A String object holds and manipulates an arbitrary sequence of bytes,
# typically representing characters. String objects may be created using
# String::new or as literals.
#
# Because of aliasing issues, users of strings should be aware of the methods
# that modify the contents of a String object.  Typically, methods with names
# ending in ``!'' modify their receiver, while those without a ``!'' return a
# new String.  However, there are exceptions, such as String#[]=.
class String
  def scanf: (String str) ?{ (top) -> top } -> Array[top]
end

# RubyGems adds the #gem method to allow activation of specific gem versions and
# overrides the #require method on Kernel to make gems appear as if they live on
# the `$LOAD_PATH`.  See the documentation of these methods for further detail.
# The Kernel module is included by class Object, so its methods are available in
# every Ruby object.
#
# The Kernel instance methods are documented in class Object while the module
# methods are documented here.  These methods are called without a receiver and
# thus can be called in functional form:
#
#     sprintf "%.1f", 1.234 #=> "1.2"
module Kernel
  private

  def scanf: (String str) ?{ (untyped) -> untyped } -> Array[untyped]
end

class Scanf::FormatSpecifier
  def conversion: () -> (Integer | String | nil)

  def count_space?: () -> MatchData?

  def letter: () -> untyped

  def match: (String str) -> MatchData?

  def matched: () -> bool?

  def matched_string: () -> String?

  def mid_match?: () -> bool

  def re_string: () -> String

  def to_re: () -> Regexp

  def to_s: () -> String

  def width: () -> Integer?

  private

  def extract_decimal: (untyped s) -> untyped

  def extract_float: (untyped s) -> untyped

  def extract_hex: (untyped s) -> untyped

  def extract_integer: (untyped s) -> untyped

  def extract_octal: (untyped s) -> untyped

  def extract_plain: (untyped s) -> untyped

  def initialize: (String str) -> void

  def nil_proc: (untyped s) -> untyped

  def skip: () -> untyped
end

class Scanf::FormatString
  def last_match_tried: () -> MatchData?

  def last_spec: () -> bool

  def last_spec_tried: () -> Scanf::FormatSpecifier?

  def match: (String str) -> Array[String | Integer]

  def matched_count: () -> Integer?

  def prune: (?Integer n) -> void

  def space: () -> bool?

  def spec_count: () -> Integer

  def string_left: () -> untyped

  def to_s: () -> String

  private

  def initialize: (String str) -> void
end

Scanf::FormatString::REGEX: Regexp

Scanf::FormatString::SPECIFIERS: String
