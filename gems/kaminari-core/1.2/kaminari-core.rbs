module Kaminari
  def self.config: () -> Kaminari::Config
  def self.configure: () { (Kaminari::Config) -> void } -> void

  class Config
    attr_accessor default_per_page: Integer
    attr_accessor max_per_page: Integer?
    attr_accessor window: Integer
    attr_accessor outer_window: Integer
    attr_accessor left: Integer
    attr_accessor right: Integer
    attr_accessor page_method_name: Symbol | String
    attr_accessor max_pages: Integer?
    attr_accessor params_on_first_page: bool

    attr_writer param_name: Symbol | String | _Callable

    def param_name: () -> (Symbol | String)
  end

  module PageScopeMethods : _Model_Relation
    def per: (Integer num, ?Integer max_per_page) -> self
    def total_pages: () -> Integer
    def current_page: () -> Integer
    def next_page: () -> Integer?
    def prev_page: () -> Integer?
    def first_page?: () -> bool
    def last_page?: () -> bool
    def out_of_range?: () -> bool
  end

  interface _Model_Relation
    def limit: (Integer) -> self
    def offset: (Integer) -> self
  end

  interface _Callable
    def call: () -> (Symbol | String)
  end

  module ConfigurationMethods
    module ClassMethods
      def paginates_per: (Integer val) -> void
      def default_per_page: () -> Integer
      def max_paginates_per: () -> Integer
      def max_per_page: () -> Integer
      def max_pages: (Integer | :none val) -> void
    end
  end

  module Helpers
    module UrlHelper
      def next_page_url: (untyped scope, **untyped options) -> String?
      alias url_to_next_page next_page_url

      def prev_page_url: (untyped scope, **untyped options) -> String?
      alias previous_page_url     prev_page_url
      alias url_to_prev_page      prev_page_url
      alias url_to_previous_page  prev_page_url

      def next_page_path: (untyped scope, **untyped options) -> String?
      alias path_to_next_page next_page_path

      def prev_page_path: (untyped scope, **untyped options) -> String?
      alias previous_page_path     prev_page_path
      alias path_to_previous_page  prev_page_path
      alias path_to_prev_page      prev_page_path
    end

    module HelperMethods
      include UrlHelper

      def paginate: (untyped scope, ?paginator_class: Class, ?template: untyped?, **untyped options) -> String
      def link_to_previous_page: (untyped scope, String name, **untyped options) ?{ () -> untyped } -> String
      alias link_to_prev_page link_to_previous_page
      def link_to_next_page: (untyped scope, String name, **untyped options) ?{ () -> untyped } -> String
      def page_entries_info: (untyped collection, ?entry_name: String?) -> String
      def rel_next_prev_link_tags: (untyped scope, **untyped options) -> String
    end
  end
end
