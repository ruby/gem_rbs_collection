module LaunchDarkly
  module Impl
    module Integrations
      module Redis
        #
        # An implementation of the LaunchDarkly client's feature store that uses a Redis
        # instance.  This object holds feature flags and related data received from the
        # streaming API.  Feature data can also be further cached in memory to reduce overhead
        # of calls to Redis.
        #
        # To use this class, you must first have the `redis` and `connection-pool` gems
        # installed.  Then, create an instance and store it in the `feature_store` property
        # of your client configuration.
        #
        class RedisFeatureStore
          include LaunchDarkly::Interfaces::FeatureStore

          #
          # Constructor for a RedisFeatureStore instance.
          #
          # @param opts [Hash] the configuration options
          # @option opts [String] :redis_url  URL of the Redis instance (shortcut for omitting redis_opts)
          # @option opts [Hash] :redis_opts  options to pass to the Redis constructor (if you want to specify more than just redis_url)
          # @option opts [String] :prefix  namespace prefix to add to all hash keys used by LaunchDarkly
          # @option opts [Logger] :logger  a `Logger` instance; defaults to `Config.default_logger`
          # @option opts [Integer] :max_connections  size of the Redis connection pool
          # @option opts [Integer] :expiration  expiration time for the in-memory cache, in seconds; 0 for no local caching
          # @option opts [Integer] :capacity  maximum number of feature flags (or related objects) to cache locally
          # @option opts [Object] :pool  custom connection pool, if desired
          # @option opts [Boolean] :pool_shutdown_on_close whether calling `close` should shutdown the custom connection pool.
          #
          def initialize: (?::Hash[untyped, untyped] opts) -> void

          def monitoring_enabled?: () -> true

          def available?: () -> bool

          #
          # Default value for the `redis_url` constructor parameter; points to an instance of Redis
          # running at `localhost` with its default port.
          #
          def self.default_redis_url: () -> String

          #
          # Default value for the `prefix` constructor parameter.
          #
          def self.default_prefix: () -> String

          def get: (kind, interned key) -> Hash[Symbol, untyped]?

          def all: (kind) -> Hash[Symbol, Hash[Symbol, untyped]]

          def delete: (kind, interned key, Integer version) -> void

          def init: (Hash[kind, Hash[Symbol, untyped]] all_data) -> void

          def upsert: (kind, Hash[Symbol, untyped] item) -> void

          def initialized?: () -> bool

          def stop: () -> void
        end

        class RedisStoreImplBase
          REDIS_ENABLED: bool

          def initialize: (untyped opts) -> void

          def stop: () -> (nil | untyped | nil)

          def description: () -> "Redis"

          def with_connection: () { (untyped) -> untyped } -> untyped

          private

          def create_redis_pool: (untyped opts) -> untyped
        end

        #
        # Internal implementation of the Redis feature store, intended to be used with CachingStoreWrapper.
        #
        class RedisFeatureStoreCore < RedisStoreImplBase
          def initialize: (untyped opts) -> void

          def available?: () -> untyped

          def description: () -> "RedisFeatureStore"

          def init_internal: (untyped all_data) -> untyped

          def get_internal: (untyped kind, untyped key) -> untyped

          def get_all_internal: (untyped kind) -> untyped

          def upsert_internal: (untyped kind, untyped new_item) -> untyped

          def initialized_internal?: () -> untyped

          private

          def before_update_transaction: (untyped base_key, untyped key) -> (untyped | nil)

          def items_key: (untyped kind) -> untyped

          def cache_key: (untyped kind, untyped key) -> untyped

          def inited_key: () -> untyped

          def get_redis: (untyped redis, untyped kind, untyped key) -> untyped
        end

        #
        # Internal implementation of the Redis big segment store.
        #
        class RedisBigSegmentStore < RedisStoreImplBase
          KEY_LAST_UP_TO_DATE: ":big_segments_synchronized_on"

          KEY_CONTEXT_INCLUDE: ":big_segment_include:"

          KEY_CONTEXT_EXCLUDE: ":big_segment_exclude:"

          def description: () -> "RedisBigSegmentStore"

          def get_metadata: () -> untyped

          def get_membership: (untyped context_hash) -> untyped
        end
      end
    end
  end
end
