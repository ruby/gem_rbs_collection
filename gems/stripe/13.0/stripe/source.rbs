module Stripe
  # `Source` objects allow you to accept a variety of payment methods. They
  # represent a customer's payment instrument, and can be used with the Stripe API
  # just like a `Card` object: once chargeable, they can be charged, or can be
  # attached to customers.
  #
  # Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
  # We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
  # This newer API provides access to our latest features and payment method types.
  #
  # Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  class Source < APIResource
    include _Source

    def self.object_name: () -> "source"
  end

  # https://docs.stripe.com/api/sources/object
  interface _Source
    def ach_credit_transfer: () -> untyped

    def ach_credit_transfer=: (untyped) -> untyped

    def ach_debit: () -> untyped

    def ach_debit=: (untyped) -> untyped

    def acss_debit: () -> untyped

    def acss_debit=: (untyped) -> untyped

    def alipay: () -> untyped

    def alipay=: (untyped) -> untyped

    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
    def amount: () -> Integer?

    # A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
    def amount=: (Integer?) -> Integer?

    def au_becs_debit: () -> untyped

    def au_becs_debit=: (untyped) -> untyped

    def bancontact: () -> untyped

    def bancontact=: (untyped) -> untyped

    def card: () -> untyped

    def card=: (untyped) -> untyped

    def card_present: () -> untyped

    def card_present=: (untyped) -> untyped

    # The client secret of the source. Used for client-side retrieval using a publishable key.
    def client_secret: () -> String

    # The client secret of the source. Used for client-side retrieval using a publishable key.
    def client_secret=: (String) -> String

    def code_verification: () -> untyped

    def code_verification=: (untyped) -> untyped

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    def created: () -> Integer

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    def created=: (Integer) -> Integer

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
    def currency: () -> String?

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
    def currency=: (String?) -> String?

    # The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
    def customer: () -> String

    # The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
    def customer=: (String) -> String

    def eps: () -> untyped

    def eps=: (untyped) -> untyped

    # The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
    def flow: () -> String

    # The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
    def flow=: (String) -> String

    def giropay: () -> untyped

    def giropay=: (untyped) -> untyped

    # Unique identifier for the object.
    def id: () -> String

    # Unique identifier for the object.
    def id=: (String) -> String

    def ideal: () -> untyped

    def ideal=: (untyped) -> untyped

    def klarna: () -> untyped

    def klarna=: (untyped) -> untyped

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    def livemode: () -> bool

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    def livemode=: (bool) -> bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    def metadata: () -> untyped?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    def metadata=: (untyped?) -> untyped?

    def multibanco: () -> untyped

    def multibanco=: (untyped) -> untyped

    # String representing the object's type. Objects of the same type share the same value.
    def object: () -> "source"

    # String representing the object's type. Objects of the same type share the same value.
    def object=: ("source") -> "source"

    # Information about the owner of the payment instrument that may be used or required by particular source types.
    def owner: () -> untyped?

    # Information about the owner of the payment instrument that may be used or required by particular source types.
    def owner=: (untyped?) -> untyped?

    def p24: () -> untyped

    def p24=: (untyped) -> untyped

    def receiver: () -> untyped

    def receiver=: (untyped) -> untyped

    def redirect: () -> untyped

    def redirect=: (untyped) -> untyped

    def sepa_debit: () -> untyped

    def sepa_debit=: (untyped) -> untyped

    def sofort: () -> untyped

    def sofort=: (untyped) -> untyped

    def source_order: () -> untyped

    def source_order=: (untyped) -> untyped

    # Extra information about a source. This will appear on your customer's statement every time you charge the source.
    def statement_descriptor: () -> String?

    # Extra information about a source. This will appear on your customer's statement every time you charge the source.
    def statement_descriptor=: (String?) -> String?

    # The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
    def status: () -> String

    # The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
    def status=: (String) -> String

    def three_d_secure: () -> untyped

    def three_d_secure=: (untyped) -> untyped

    # The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
    def type: () -> ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "alipay" | "au_becs_debit" | "bancontact" | "card" | "card_present" | "eps" | "giropay" | "ideal" | "klarna" | "multibanco" | "p24" | "sepa_debit" | "sofort" | "three_d_secure" | "wechat")

    # The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
    def type=: (("ach_credit_transfer" | "ach_debit" | "acss_debit" | "alipay" | "au_becs_debit" | "bancontact" | "card" | "card_present" | "eps" | "giropay" | "ideal" | "klarna" | "multibanco" | "p24" | "sepa_debit" | "sofort" | "three_d_secure" | "wechat")) -> ("ach_credit_transfer" | "ach_debit" | "acss_debit" | "alipay" | "au_becs_debit" | "bancontact" | "card" | "card_present" | "eps" | "giropay" | "ideal" | "klarna" | "multibanco" | "p24" | "sepa_debit" | "sofort" | "three_d_secure" | "wechat")

    # Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    def usage: () -> String?

    # Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    def usage=: (String?) -> String?

    def wechat: () -> untyped

    def wechat=: (untyped) -> untyped
  end
end
