module Stripe
  # This object represents a customer of your business. Use it to [create recurring charges](https://stripe.com/docs/invoicing/customer), [save payment](https://stripe.com/docs/payments/save-during-payment) and contact information,
  # and track payments that belong to the same customer.
  class Customer < APIResource
    include _Customer

    def self.object_name: () -> "customer"

    # nested_resource_class_methods :balance_transaction, operations: %i[create retrieve update list]
    def self.create_balance_transaction: (untyped id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :balance_transaction, operations: %i[create retrieve update list]
    def self.retrieve_balance_transaction: (untyped id, untyped nested_id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :balance_transaction, operations: %i[create retrieve update list]
    def self.update_balance_transaction: (untyped id, untyped nested_id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :balance_transaction, operations: %i[create retrieve update list]
    def self.list_balance_transactions: (untyped id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :cash_balance_transaction, operations: %i[retrieve list]
    def self.retrieve_cash_balance_transaction: (untyped id, untyped nested_id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :cash_balance_transaction, operations: %i[retrieve list]
    def self.list_cash_balance_transactions: (untyped id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :source, operations: %i[create retrieve update delete list]
    def self.create_source: (untyped id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :source, operations: %i[create retrieve update delete list]
    def self.retrieve_source: (untyped id, untyped nested_id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :source, operations: %i[create retrieve update delete list]
    def self.update_source: (untyped id, untyped nested_id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :source, operations: %i[create retrieve update delete list]
    def self.delete_source: (untyped id, untyped nested_id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :source, operations: %i[create retrieve update delete list]
    def self.list_sources: (untyped id, ?untyped params, ?untyped opts) -> ListObject[Source]

    # nested_resource_class_methods :tax_id, operations: %i[create retrieve delete list]
    def self.create_tax_id: (untyped id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :tax_id, operations: %i[create retrieve delete list]
    def self.retrieve_tax_id: (untyped id, untyped nested_id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :tax_id, operations: %i[create retrieve delete list]
    def self.delete_tax_id: (untyped id, untyped nested_id, ?untyped params, ?untyped opts) -> untyped

    # nested_resource_class_methods :tax_id, operations: %i[create retrieve delete list]
    def self.list_tax_ids: (untyped id, ?untyped params, ?untyped opts) -> untyped

    # Creates a new customer object.
    def self.create: (?untyped params, ?untyped opts) -> Customer

    # Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.
    def self.list: (?untyped filters, ?untyped opts) -> ListObject[Customer]

    alias self.detach_source self.delete_source

    # Returns a list of PaymentMethods for a given Customer
    def list_payment_methods: (?untyped params, ?untyped opts) -> ListObject[PaymentMethod]

    # Returns a list of PaymentMethods for a given Customer
    def self.list_payment_methods: (untyped id, ?untyped params, ?untyped opts) -> ListObject[PaymentMethod]
  end

  # https://docs.stripe.com/api/customers
  interface _Customer
    # The customer's address.
    def address: () -> (StripeObject & _Address)?

    # The customer's address.
    def address=: ((StripeObject & _Address)?) -> (StripeObject & _Address)?

    # The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize.
    def balance: () -> Integer

    # The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize.
    def balance=: (Integer) -> Integer

    # The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is "cash_balance". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically.
    def cash_balance: () -> untyped?

    # The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is "cash_balance". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically.
    def cash_balance=: (untyped?) -> untyped?

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    def created: () -> Integer

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    def created=: (Integer) -> Integer

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
    def currency: () -> String?

    # Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
    def currency=: (String?) -> String?

    # ID of the default payment source for the customer.
    #
    # If you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
    def default_source: () -> String?

    # ID of the default payment source for the customer.
    #
    # If you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
    def default_source=: (String?) -> String?

    # Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.
    #
    # If an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.
    #
    # If you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`.
    def delinquent: () -> bool?

    # Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.
    #
    # If an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.
    #
    # If you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`.
    def delinquent=: (bool?) -> bool?

    # An arbitrary string attached to the object. Often useful for displaying to users.
    def description: () -> String?

    # An arbitrary string attached to the object. Often useful for displaying to users.
    def description=: (String?) -> String?

    # Describes the current discount active on the customer, if there is one.
    def discount: () -> untyped?

    # Describes the current discount active on the customer, if there is one.
    def discount=: (untyped?) -> untyped?

    # The customer's email address.
    def email: () -> String?

    # The customer's email address.
    def email=: (String?) -> String?

    # Unique identifier for the object.
    def id: () -> String

    # Unique identifier for the object.
    def id=: (String) -> String

    # The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes.
    def invoice_credit_balance: () -> untyped

    # The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes.
    def invoice_credit_balance=: (untyped) -> untyped

    # The prefix for the customer used to generate unique invoice numbers.
    def invoice_prefix: () -> String?

    # The prefix for the customer used to generate unique invoice numbers.
    def invoice_prefix=: (String?) -> String?

    def invoice_settings: () -> untyped

    def invoice_settings=: (untyped) -> untyped

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    def livemode: () -> bool

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    def livemode=: (bool) -> bool

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    def metadata: () -> untyped

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    def metadata=: (untyped) -> untyped

    # The customer's full name or business name.
    def name: () -> String?

    # The customer's full name or business name.
    def name=: (String?) -> String?

    # The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses.
    def next_invoice_sequence: () -> Integer

    # The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses.
    def next_invoice_sequence=: (Integer) -> Integer

    # String representing the object's type. Objects of the same type share the same value.
    def object: () -> "customer"

    # String representing the object's type. Objects of the same type share the same value.
    def object=: ("customer") -> "customer"

    # The customer's phone number.
    def phone: () -> String?

    # The customer's phone number.
    def phone=: (String?) -> String?

    # The customer's preferred locales (languages), ordered by preference.
    def preferred_locales: () -> Array[String]?

    # The customer's preferred locales (languages), ordered by preference.
    def preferred_locales=: (Array[String]?) -> Array[String]?

    # Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
    def shipping: () -> untyped?

    # Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
    def shipping=: (untyped?) -> untyped?

    # The customer's payment sources, if any.
    def sources: () -> ListObject[Source]

    # The customer's payment sources, if any.
    def sources=: (ListObject[Source]) -> ListObject[Source]

    # The customer's current subscriptions, if any.
    def subscriptions: () -> untyped

    # The customer's current subscriptions, if any.
    def subscriptions=: (untyped) -> untyped

    def tax: () -> untyped

    def tax=: (untyped) -> untyped

    # Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **"Reverse charge"**.
    def tax_exempt: () -> ("exempt" | "none" | "reverse")?

    # Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **"Reverse charge"**.
    def tax_exempt=: (("exempt" | "none" | "reverse")?) -> ("exempt" | "none" | "reverse")?

    # The customer's tax IDs.
    def tax_ids: () -> untyped

    # The customer's tax IDs.
    def tax_ids=: (untyped) -> untyped

    # ID of the test clock that this customer belongs to.
    def test_clock: () -> String?

    # ID of the test clock that this customer belongs to.
    def test_clock=: (String?) -> String?
  end
end
