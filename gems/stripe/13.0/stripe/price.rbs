module Stripe
  # Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
  # [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
  #
  # For example, you might have a single "gold" product that has prices for $10/month, $100/year, and â‚¬9 once.
  #
  # Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
  class Price < APIResource
    include _Price

    def self.object_name: () -> "price"

    # Creates a new price for an existing product. The price can be recurring or one-time.
    def self.create: (?untyped params, ?untyped opts) -> instance

    # Returns a list of your active prices, excluding [inline prices](https://stripe.com/docs/products-prices/pricing-models#inline-pricing). For the list of inactive prices, set active to false.
    def self.list: (?untyped params, ?untyped opts) -> ListObject[instance]
  end

  # https://stripe.com/docs/api/prices/object
  interface _Price
    # Whether the price can be used for new purchases.
    def active: () -> bool

    # Whether the price can be used for new purchases.
    def active=: (bool) -> bool

    # Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    def billing_scheme: () -> ("per_unit" | "tiered")

    # Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    def billing_scheme=: (("per_unit" | "tiered")) -> ("per_unit" | "tiered")

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    def created: () -> Integer

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    def created=: (Integer) -> Integer

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    def currency: () -> String

    # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    def currency=: (String) -> String

    # Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
    def currency_options: () -> untyped

    # Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
    def currency_options=: (untyped) -> untyped

    # When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
    def custom_unit_amount: () -> untyped?

    # When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
    def custom_unit_amount=: (untyped?) -> untyped?

    # Unique identifier for the object.
    def id: () -> String

    # Unique identifier for the object.
    def id=: (String) -> String

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    def livemode: () -> bool

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    def livemode=: (bool) -> bool

    # A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
    def lookup_key: () -> String?

    # A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
    def lookup_key=: (String?) -> String?

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    def metadata: () -> untyped

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    def metadata=: (untyped) -> untyped

    # A brief description of the price, hidden from customers.
    def nickname: () -> String?

    # A brief description of the price, hidden from customers.
    def nickname=: (String?) -> String?

    # String representing the object's type. Objects of the same type share the same value.
    def object: () -> "price"

    # String representing the object's type. Objects of the same type share the same value.
    def object=: ("price") -> "price"

    # The ID of the product this price is associated with.
    def product: () -> String

    # The ID of the product this price is associated with.
    def product=: (String) -> String

    # The recurring components of a price such as `interval` and `usage_type`.
    def recurring: () -> untyped?

    # The recurring components of a price such as `interval` and `usage_type`.
    def recurring=: (untyped?) -> untyped?

    # Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    def tax_behavior: () -> ("exclusive" | "inclusive" | "unspecified")?

    # Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    def tax_behavior=: (("exclusive" | "inclusive" | "unspecified")?) -> ("exclusive" | "inclusive" | "unspecified")?

    # Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    def tiers: () -> Array[untyped]

    # Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    def tiers=: (Array[untyped]) -> Array[untyped]

    # Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    def tiers_mode: () -> ("graduated" | "volume")?

    # Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    def tiers_mode=: (("graduated" | "volume")?) -> ("graduated" | "volume")?

    # Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
    def transform_quantity: () -> untyped?

    # Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
    def transform_quantity=: (untyped?) -> untyped?

    # One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    def type: () -> ("one_time" | "recurring")

    # One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    def type=: (("one_time" | "recurring")) -> ("one_time" | "recurring")

    # The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    def unit_amount: () -> Integer?

    # The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    def unit_amount=: (Integer?) -> Integer?

    # The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    def unit_amount_decimal: () -> String?

    # The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    def unit_amount_decimal=: (String?) -> String?
  end
end
