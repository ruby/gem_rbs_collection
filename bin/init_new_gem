#!/usr/bin/env ruby

require 'pathname'

def help
  puts <<~HELP
    Generate a boilerplate for a new gem RBS.

    Usage: bin/init_new_gem GEM_NAME
  HELP
end

def normalize_github_url(str)
  case str
  when /\A\s*\z/
    nil
  when %r!\A[^/]+/[^/]+\z!
    "https://github.com/#{str}.git"
  when /\.git\z/
    str
  else
    "#{str}.git"
  end
end

def put(path, content)
  puts "create #{path}"
  path.dirname.mkpath unless path.dirname.directory?
  path.write(content)
end

def update(path, &block)
  puts "update #{path}"
  new_content = yield path.read
  path.write(new_content)
end

def sh!(*cmd)
  puts "execute #{cmd.join(' ')}"
  system(*cmd, exception: true)
end

if ARGV.size != 1 || %w[--help -h help].include?(ARGV[0])
  help
  exit 1
end

gem_name = ARGV[0]

begin
  puts "Gem version you want to add (MAJOR.MINOR is recommended. e.g. 4.2):"
  print '> '
end while (version = $stdin.gets.chomp).empty?

puts "GitHub Repository as USER/REPO (default: skip adding git submodule)"
print '> '
git_repo = normalize_github_url($stdin.gets.chomp)

puts "Your GitHub account if you want to become the maintainer of RBS for this gem (default: skip adding you to the maintainer)"
puts "See https://github.com/ruby/gem_rbs_collection/blob/main/docs/CONTRIBUTING.md#code-owners"
print '> '
github_account = $stdin.gets.chomp.tap { break if _1.empty? }

base = Pathname("gems/#{gem_name}/#{version}")

put base / "#{gem_name}.rbs", <<~RBS
  # Write the type definition here!
RBS
put base / "_test/Steepfile", <<~RUBY
  D = Steep::Diagnostic

  target :test do
    check "."
    signature "."

    repo_path "../../../"
    library "#{gem_name}"

    configure_code_diagnostics(D::Ruby.all_error)
  end
RUBY
put base / "_test/test.rb", <<~RUBY
  # Write Ruby code to test the RBS.
  # It is type checked by `steep check` command.

  require "#{gem_name}"
RUBY
put base / '_scripts/test', <<~BASH
  #!/usr/bin/env bash

  # Exit command with non-zero status code, Output logs of every command executed, Treat unset variables as an error when substituting.
  set -eou pipefail
  # Internal Field Separator - Linux shell variable
  IFS=$'\\n\\t'
  # Print shell input lines
  set -v

  # Set RBS_DIR variable to change directory to execute type checks using `steep check`
  RBS_DIR=$(cd $(dirname $0)/..; pwd)
  # Set REPO_DIR variable to validate RBS files added to the corresponding folder
  REPO_DIR=$(cd $(dirname $0)/../../..; pwd)
  # Validate RBS files, using the bundler environment present
  bundle exec rbs --repo $REPO_DIR -r #{gem_name}:#{version} validate --silent

  cd ${RBS_DIR}/_test
  # Run type checks
  bundle exec steep check

  $(git rev-parse --show-toplevel)/bin/check-untyped-call.rb
  $(git rev-parse --show-toplevel)/bin/check-manifest-yaml.rb
BASH
(base / '_scripts/test').chmod(0o755)
put base / 'manifest.yaml', <<~'YAML'
  # manifest.yaml describes dependencies which do not appear in the gemspec.
  # If this gem includes such dependencies, comment-out the following lines and
  # declare the dependencies.
  # If all dependencies appear in the gemspec, you should remove this file.
  #
  # dependencies:
  #   - name: pathname
YAML

if git_repo
  src_path = base.join('_src')
  sh! 'git', 'submodule', 'add', '-f', '--name', src_path.to_s, git_repo, src_path.to_s
end

if github_account
  github_account = "@#{github_account}" unless github_account.start_with?('@')
  update(Pathname('.github/CODEOWNERS')) do |content|
    lines = content.lines

    pre_gems_lines, gems_lines =
      lines.map(&:chomp).slice_before('# Maintainer of individual gems (alphabetical order)').to_a
    pre_gems_lines << gems_lines.shift

    gems_lines << "/gems/#{gem_name} #{github_account}"
    gems_lines.sort!

    gems = gems_lines.map {|line| line.split }
    longest_gem_size = gems.map {|gem, _| gem.size }.max
    gem_lines = gems.map do |gem, owner|
      space = " " * (longest_gem_size - gem.size)
      "#{gem}#{space} #{owner}"
    end

    (pre_gems_lines + gem_lines).join("\n")
  end
end

puts
puts <<~MESSAGE
  The boilerplate for #{gem_name} gem has been generated.
  Start writing the RBS! We recommend to focus on the main API of #{gem_name}.
  See the CONTRIBUTING.md for more information.
MESSAGE
